{"uid":"5d0d7c57014930c6","name":"test_TC_LG_004","fullName":"testCases.Logout Test Cases.test_TC_LG_004.Test_TC_LG_004#test_TC_LG_004","historyId":"0738fdb89d86f23a8c64a48c5a96b144","time":{"start":1742321872660,"stop":1742321889021,"duration":16361},"status":"failed","statusMessage":"AssertionError: assert False","statusTrace":"self = <test_TC_LG_004.Test_TC_LG_004 object at 0x0000025E48F47B10>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"1d1f8fce180906657a5102c77d8a9282\")>\n\n    def test_TC_LG_004(self, setup):\n        self.driver = setup\n        self.driver.get(self.baseurl)\n        self.driver.maximize_window()\n        self.logger.info(\"Application Started..........\")\n    \n        try:\n            # Step 1: Perform Login\n            self.hp = Homepage(self.driver)\n            self.hp.clickmyaccount()\n            self.hp.clicklogin()\n    \n            self.lp = Login(self.driver)\n            self.lp.click_email(Read_Commondata.get_useremail())\n            self.lp.click_password(Read_Commondata.get_userpassword())\n            self.lp.click_login()\n    \n            # Step 2: Validate Login Success\n            self.myacc = self.lp.myaccount_page()\n    \n    \n            if self.myacc.strip().lower() == \"valid\":\n                self.logger.info(f\"User {Read_Commondata.get_useremail()} logged in successfully\")\n                allure.attach(self.driver.get_screenshot_as_png(), name=\"After login: My Account page\", attachment_type=AttachmentType.PNG)\n    \n                # Step 4: Validate Session Persistence\n                self.ma = My_Account_page(self.driver)\n                self.ma.click_myaccount()\n    \n    \n                if self.ma.is_logout_visible():\n                    self.logger.info(\"Session maintained successfully after reopening the browser\")\n                    allure.attach(self.driver.get_screenshot_as_png(), name=\"Session Maintained\", attachment_type=AttachmentType.PNG)\n                    self.ma.click_logout()\n                    self.driver.back()\n                    self.ma.click_myaccount()\n                    if self.ma.is_logout_visible():\n                        self.logger.info(\"Session maintained even after logout....so logging out \")\n                        allure.attach(self.driver.get_screenshot_as_png(), name=\"Session maintained even after logout\", attachment_type=AttachmentType.PNG)\n                        self.ma.click_logout()\n>                       assert False\nE                       assert False\n\ntestCases\\Logout Test Cases\\test_TC_LG_004.py:61: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_TC_LG_004.Test_TC_LG_004 object at 0x0000025E48F47B10>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"1d1f8fce180906657a5102c77d8a9282\")>\n\n    def test_TC_LG_004(self, setup):\n        self.driver = setup\n        self.driver.get(self.baseurl)\n        self.driver.maximize_window()\n        self.logger.info(\"Application Started..........\")\n    \n        try:\n            # Step 1: Perform Login\n            self.hp = Homepage(self.driver)\n            self.hp.clickmyaccount()\n            self.hp.clicklogin()\n    \n            self.lp = Login(self.driver)\n            self.lp.click_email(Read_Commondata.get_useremail())\n            self.lp.click_password(Read_Commondata.get_userpassword())\n            self.lp.click_login()\n    \n            # Step 2: Validate Login Success\n            self.myacc = self.lp.myaccount_page()\n    \n    \n            if self.myacc.strip().lower() == \"valid\":\n                self.logger.info(f\"User {Read_Commondata.get_useremail()} logged in successfully\")\n                allure.attach(self.driver.get_screenshot_as_png(), name=\"After login: My Account page\", attachment_type=AttachmentType.PNG)\n    \n                # Step 4: Validate Session Persistence\n                self.ma = My_Account_page(self.driver)\n                self.ma.click_myaccount()\n    \n    \n                if self.ma.is_logout_visible():\n                    self.logger.info(\"Session maintained successfully after reopening the browser\")\n                    allure.attach(self.driver.get_screenshot_as_png(), name=\"Session Maintained\", attachment_type=AttachmentType.PNG)\n                    self.ma.click_logout()\n                    self.driver.back()\n                    self.ma.click_myaccount()\n                    if self.ma.is_logout_visible():\n                        self.logger.info(\"Session maintained even after logout....so logging out \")\n                        allure.attach(self.driver.get_screenshot_as_png(), name=\"Session maintained even after logout\", attachment_type=AttachmentType.PNG)\n                        self.ma.click_logout()\n                        assert False\n                    else:\n                        allure.attach(self.driver.get_screenshot_as_png(), name=\"Session not maintained after logout\",\n                                      attachment_type=AttachmentType.PNG)\n                        assert True\n    \n            else:\n                self.logger.error(\"Login unsuccessful, cannot validate session persistence\")\n                allure.attach(self.driver.get_screenshot_as_png(), name=\"Login Failed\", attachment_type=AttachmentType.PNG)\n                assert False\n    \n        except Exception as e:\n            self.logger.error(f\"Error during navigation or login function: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(), name=\"Error occurred\", attachment_type=AttachmentType.PNG)\n>           assert False\nE           assert False\n\ntestCases\\Logout Test Cases\\test_TC_LG_004.py:75: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"setup","time":{"start":1742321869543,"stop":1742321872659,"duration":3116},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"attachmentStep":false,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert False","statusTrace":"self = <test_TC_LG_004.Test_TC_LG_004 object at 0x0000025E48F47B10>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"1d1f8fce180906657a5102c77d8a9282\")>\n\n    def test_TC_LG_004(self, setup):\n        self.driver = setup\n        self.driver.get(self.baseurl)\n        self.driver.maximize_window()\n        self.logger.info(\"Application Started..........\")\n    \n        try:\n            # Step 1: Perform Login\n            self.hp = Homepage(self.driver)\n            self.hp.clickmyaccount()\n            self.hp.clicklogin()\n    \n            self.lp = Login(self.driver)\n            self.lp.click_email(Read_Commondata.get_useremail())\n            self.lp.click_password(Read_Commondata.get_userpassword())\n            self.lp.click_login()\n    \n            # Step 2: Validate Login Success\n            self.myacc = self.lp.myaccount_page()\n    \n    \n            if self.myacc.strip().lower() == \"valid\":\n                self.logger.info(f\"User {Read_Commondata.get_useremail()} logged in successfully\")\n                allure.attach(self.driver.get_screenshot_as_png(), name=\"After login: My Account page\", attachment_type=AttachmentType.PNG)\n    \n                # Step 4: Validate Session Persistence\n                self.ma = My_Account_page(self.driver)\n                self.ma.click_myaccount()\n    \n    \n                if self.ma.is_logout_visible():\n                    self.logger.info(\"Session maintained successfully after reopening the browser\")\n                    allure.attach(self.driver.get_screenshot_as_png(), name=\"Session Maintained\", attachment_type=AttachmentType.PNG)\n                    self.ma.click_logout()\n                    self.driver.back()\n                    self.ma.click_myaccount()\n                    if self.ma.is_logout_visible():\n                        self.logger.info(\"Session maintained even after logout....so logging out \")\n                        allure.attach(self.driver.get_screenshot_as_png(), name=\"Session maintained even after logout\", attachment_type=AttachmentType.PNG)\n                        self.ma.click_logout()\n>                       assert False\nE                       assert False\n\ntestCases\\Logout Test Cases\\test_TC_LG_004.py:61: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_TC_LG_004.Test_TC_LG_004 object at 0x0000025E48F47B10>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"1d1f8fce180906657a5102c77d8a9282\")>\n\n    def test_TC_LG_004(self, setup):\n        self.driver = setup\n        self.driver.get(self.baseurl)\n        self.driver.maximize_window()\n        self.logger.info(\"Application Started..........\")\n    \n        try:\n            # Step 1: Perform Login\n            self.hp = Homepage(self.driver)\n            self.hp.clickmyaccount()\n            self.hp.clicklogin()\n    \n            self.lp = Login(self.driver)\n            self.lp.click_email(Read_Commondata.get_useremail())\n            self.lp.click_password(Read_Commondata.get_userpassword())\n            self.lp.click_login()\n    \n            # Step 2: Validate Login Success\n            self.myacc = self.lp.myaccount_page()\n    \n    \n            if self.myacc.strip().lower() == \"valid\":\n                self.logger.info(f\"User {Read_Commondata.get_useremail()} logged in successfully\")\n                allure.attach(self.driver.get_screenshot_as_png(), name=\"After login: My Account page\", attachment_type=AttachmentType.PNG)\n    \n                # Step 4: Validate Session Persistence\n                self.ma = My_Account_page(self.driver)\n                self.ma.click_myaccount()\n    \n    \n                if self.ma.is_logout_visible():\n                    self.logger.info(\"Session maintained successfully after reopening the browser\")\n                    allure.attach(self.driver.get_screenshot_as_png(), name=\"Session Maintained\", attachment_type=AttachmentType.PNG)\n                    self.ma.click_logout()\n                    self.driver.back()\n                    self.ma.click_myaccount()\n                    if self.ma.is_logout_visible():\n                        self.logger.info(\"Session maintained even after logout....so logging out \")\n                        allure.attach(self.driver.get_screenshot_as_png(), name=\"Session maintained even after logout\", attachment_type=AttachmentType.PNG)\n                        self.ma.click_logout()\n                        assert False\n                    else:\n                        allure.attach(self.driver.get_screenshot_as_png(), name=\"Session not maintained after logout\",\n                                      attachment_type=AttachmentType.PNG)\n                        assert True\n    \n            else:\n                self.logger.error(\"Login unsuccessful, cannot validate session persistence\")\n                allure.attach(self.driver.get_screenshot_as_png(), name=\"Login Failed\", attachment_type=AttachmentType.PNG)\n                assert False\n    \n        except Exception as e:\n            self.logger.error(f\"Error during navigation or login function: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(), name=\"Error occurred\", attachment_type=AttachmentType.PNG)\n>           assert False\nE           assert False\n\ntestCases\\Logout Test Cases\\test_TC_LG_004.py:75: AssertionError","steps":[],"attachments":[{"uid":"a32d126c5887aa56","name":"After login: My Account page","source":"a32d126c5887aa56.png","type":"image/png","size":130598},{"uid":"7029586ec16087d3","name":"Session Maintained","source":"7029586ec16087d3.png","type":"image/png","size":141931},{"uid":"c7fe62e14cb076a1","name":"Session maintained even after logout","source":"c7fe62e14cb076a1.png","type":"image/png","size":141931},{"uid":"e5e116ebf900bf6b","name":"Error occurred","source":"e5e116ebf900bf6b.png","type":"image/png","size":136625},{"uid":"41c2d5158bc86114","name":"log","source":"41c2d5158bc86114.txt","type":"text/plain","size":817820}],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":5,"stepsCount":0,"attachmentStep":false,"hasContent":true},"afterStages":[{"name":"setup::0","time":{"start":1742321889140,"stop":1742321909596,"duration":20456},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"attachmentStep":false,"hasContent":false}],"labels":[{"name":"severity","value":"critical"},{"name":"tag","value":"session"},{"name":"tag","value":"critical"},{"name":"tag","value":"negative"},{"name":"tag","value":"regression"},{"name":"parentSuite","value":"testCases.Logout Test Cases"},{"name":"suite","value":"test_TC_LG_004"},{"name":"subSuite","value":"Test_TC_LG_004"},{"name":"host","value":"DESKTOP-DL1JSBI"},{"name":"thread","value":"4620-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testCases.Logout Test Cases.test_TC_LG_004"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["negative","critical","session","regression"]},"source":"5d0d7c57014930c6.json","parameterValues":[]}