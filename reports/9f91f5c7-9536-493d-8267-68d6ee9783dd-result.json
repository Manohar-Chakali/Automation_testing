{"name": "test_login", "status": "failed", "statusDetails": {"message": "AssertionError: Login was unsuccessful\nassert False", "trace": "self = <test_002_Login.Test_002_login object at 0x000001AB4F450F80>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"ca8191669ab9e3ff5679c5a1df6f81f7\")>\n\n    @allure.severity(allure.severity_level.CRITICAL)\n    def test_login(self, setup):\n        self.driver = setup\n        self.driver.get(self.baseurl)\n        self.driver.maximize_window()\n    \n        self.logger.info(\"**** Login test started ****\")\n        self.hp = Homepage(self.driver)\n    \n        try:\n            # Navigate to Login Page\n            self.hp.clickmyaccount()\n            self.logger.debug(\"**** My Account clicked ****\")\n            self.hp.clicklogin()\n            self.logger.debug(\"**** Clicked login button ****\")\n            self.ma = My_Account_page(self.driver)\n    \n            # Perform Login\n            self.logger.debug(\"**** Reached the login page ****\")\n            self.lp = Login(self.driver)\n    \n            self.email = Read_Commondata.get_useremail()\n            self.password = Read_Commondata.get_userpassword()\n    \n            self.lp.click_email(self.email)\n            self.logger.debug(f\"**** Entered email: {self.email} ****\")\n            self.lp.click_password(self.password)\n            self.logger.debug(f\"**** Entered password: {self.password} ****\")\n            self.lp.click_login()\n            self.logger.debug(\"**** Login button clicked ****\")\n    \n            # Screenshot after login attempt\n            allure.attach(self.driver.get_screenshot_as_png(), name=\"After_Login_Attempt\",\n                          attachment_type=AttachmentType.PNG)\n    \n        except Exception as e:\n            self.logger.error(f\"**** Error during login: {e} ****\")\n            allure.attach(self.driver.get_screenshot_as_png(), name=\"Error_during_login\",\n                          attachment_type=AttachmentType.PNG)\n            self.driver.quit()\n            assert False, \"Exception occurred during login\"\n    \n        finally:\n            # Check the login result\n            self.myacc = self.lp.myaccount_page()\n            self.logger.info(f\"**** Detected login result: {self.myacc} ****\")\n    \n            # Save page source if result is unexpected\n            if self.myacc.strip().lower() not in [\"valid\", \"invalid\"]:\n                with open(\"debug_page_source.html\", \"w\", encoding=\"utf-8\") as f:\n                    f.write(self.driver.page_source)\n                self.logger.warning(\"**** Unexpected login result! Saved page source for analysis ****\")\n    \n            if self.myacc.strip().lower() in [\"exceeded\", \"unknown\"]:\n                self.myacc = \"Invalid\"\n    \n            # Successful Login Handling\n            if self.myacc.strip().lower() == \"valid\":\n                self.logger.info(\"**** Login Successful ****\")\n                self.ma.click_myaccount()\n                self.logger.info(\"**** Clicked on My account ****\")\n                self.ma.click_logout()\n                self.logger.info(\"**** Logout Successful ****\")\n                assert True\n    \n            # Failed Login Handling\n            else:\n                self.logger.error(\"**** Login unsuccessful, My Account page not displayed ****\")\n                allure.attach(self.driver.get_screenshot_as_png(), name=\"After_login\",\n                              attachment_type=AttachmentType.PNG)\n>               assert False, \"Login was unsuccessful\"\nE               AssertionError: Login was unsuccessful\nE               assert False\n\ntestCases\\Login  Test Cases\\test_002_Login.py:86: AssertionError"}, "attachments": [{"name": "After_Login_Attempt", "source": "cc7eff6e-8682-49f0-b61e-e486c45071ba-attachment.png", "type": "image/png"}, {"name": "After_login", "source": "d54c1668-bd0f-4ec0-91fc-9839baad7afd-attachment.png", "type": "image/png"}, {"name": "log", "source": "769ac2af-4e21-4037-be90-0f03409f9675-attachment.txt", "type": "text/plain"}], "start": 1740912710826, "stop": 1740912728763, "uuid": "d8b87839-cd9a-4cbd-a864-c7d22ebfa443", "historyId": "09f2268e7f36c00d33136787d696254a", "testCaseId": "09f2268e7f36c00d33136787d696254a", "fullName": "testCases.Login  Test Cases.test_002_Login.Test_002_login#test_login", "labels": [{"name": "severity", "value": "critical"}, {"name": "parentSuite", "value": "testCases.Login  Test Cases"}, {"name": "suite", "value": "test_002_Login"}, {"name": "subSuite", "value": "Test_002_login"}, {"name": "host", "value": "DESKTOP-DL1JSBI"}, {"name": "thread", "value": "8168-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testCases.Login  Test Cases.test_002_Login"}]}