{"name": "test_TC_LG_003", "status": "failed", "statusDetails": {"message": "AssertionError: assert False", "trace": "self = <TC_LG_003.Test_TC_LG_003 object at 0x00000257EFB93F20>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"d9ef2b5c2bf0a0bf1ac4ac55ccfdcb87\")>\n\n    def test_TC_LG_003(self, setup):\n        self.driver = setup\n        self.driver.get(self.baseurl)\n        self.driver.maximize_window()\n        self.logger.info(\"Application Started..........\")\n    \n        try:\n            # Step 1: Perform Login\n            self.hp = Homepage(self.driver)\n            self.hp.clickmyaccount()\n            self.hp.clicklogin()\n    \n            self.lp = Login(self.driver)\n            self.lp.click_email(Read_Commondata.get_useremail())\n            self.lp.click_password(Read_Commondata.get_userpassword())\n            self.lp.click_login()\n    \n            # Step 2: Validate Login Success\n            self.myacc = self.lp.myaccount_page()\n    \n            if self.myacc.strip().lower() == \"valid\":\n                self.logger.info(f\"user {Read_Commondata.get_useremail()} logged in successfully\")\n                allure.attach(self.driver.get_screenshot_as_png(), name=\"After login: My Account page\",\n                              attachment_type=AttachmentType.PNG)\n    \n                # Step 3: Capture Cookies (for Session Persistence Check)\n                cookies = self.driver.get_cookies()\n                self.logger.info(f\"Cookies captured: {cookies}\")\n    \n                # Step 4: Close the Browser\n                self.driver.quit()\n    \n                # Step 5: Reopen a New Browser Session\n                self.driver = webdriver.Chrome()  # Ensure proper driver initialization\n                self.driver.get(self.baseurl)\n                self.driver.maximize_window()\n    \n                # Restore Cookies\n                for cookie in cookies:\n                    if \"sameSite\" in cookie:\n                        cookie.pop(\"sameSite\")  # Handle any sameSite policy issues\n                    self.driver.add_cookie(cookie)\n    \n                # Reload the page to apply cookies\n                self.driver.refresh()\n                self.logger.info(\"Reopened the browser and applied session cookies\")\n    \n                # Step 6: Validate Session Persistence\n                self.ma = My_Account_page(self.driver)\n                self.ma.click_myaccount()\n    \n                if self.ma.is_logout_visible():\n                    self.logger.info(\"Session maintained successfully after reopening the browser\")\n                    allure.attach(self.driver.get_screenshot_as_png(), name=\"Session Maintained\",\n                                  attachment_type=AttachmentType.PNG)\n                    assert True\n                else:\n                    self.logger.error(\"Session not maintained, user is logged out\")\n                    allure.attach(self.driver.get_screenshot_as_png(), name=\"Session Lost\",\n                                  attachment_type=AttachmentType.PNG)\n>                   assert False\nE                   assert False\n\ntestCases\\Logout Test Cases\\TC_LG_003.py:75: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <TC_LG_003.Test_TC_LG_003 object at 0x00000257EFB93F20>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"d9ef2b5c2bf0a0bf1ac4ac55ccfdcb87\")>\n\n    def test_TC_LG_003(self, setup):\n        self.driver = setup\n        self.driver.get(self.baseurl)\n        self.driver.maximize_window()\n        self.logger.info(\"Application Started..........\")\n    \n        try:\n            # Step 1: Perform Login\n            self.hp = Homepage(self.driver)\n            self.hp.clickmyaccount()\n            self.hp.clicklogin()\n    \n            self.lp = Login(self.driver)\n            self.lp.click_email(Read_Commondata.get_useremail())\n            self.lp.click_password(Read_Commondata.get_userpassword())\n            self.lp.click_login()\n    \n            # Step 2: Validate Login Success\n            self.myacc = self.lp.myaccount_page()\n    \n            if self.myacc.strip().lower() == \"valid\":\n                self.logger.info(f\"user {Read_Commondata.get_useremail()} logged in successfully\")\n                allure.attach(self.driver.get_screenshot_as_png(), name=\"After login: My Account page\",\n                              attachment_type=AttachmentType.PNG)\n    \n                # Step 3: Capture Cookies (for Session Persistence Check)\n                cookies = self.driver.get_cookies()\n                self.logger.info(f\"Cookies captured: {cookies}\")\n    \n                # Step 4: Close the Browser\n                self.driver.quit()\n    \n                # Step 5: Reopen a New Browser Session\n                self.driver = webdriver.Chrome()  # Ensure proper driver initialization\n                self.driver.get(self.baseurl)\n                self.driver.maximize_window()\n    \n                # Restore Cookies\n                for cookie in cookies:\n                    if \"sameSite\" in cookie:\n                        cookie.pop(\"sameSite\")  # Handle any sameSite policy issues\n                    self.driver.add_cookie(cookie)\n    \n                # Reload the page to apply cookies\n                self.driver.refresh()\n                self.logger.info(\"Reopened the browser and applied session cookies\")\n    \n                # Step 6: Validate Session Persistence\n                self.ma = My_Account_page(self.driver)\n                self.ma.click_myaccount()\n    \n                if self.ma.is_logout_visible():\n                    self.logger.info(\"Session maintained successfully after reopening the browser\")\n                    allure.attach(self.driver.get_screenshot_as_png(), name=\"Session Maintained\",\n                                  attachment_type=AttachmentType.PNG)\n                    assert True\n                else:\n                    self.logger.error(\"Session not maintained, user is logged out\")\n                    allure.attach(self.driver.get_screenshot_as_png(), name=\"Session Lost\",\n                                  attachment_type=AttachmentType.PNG)\n                    assert False\n    \n            else:\n                self.logger.error(\"Login unsuccessful, cannot validate session persistence\")\n                allure.attach(self.driver.get_screenshot_as_png(), name=\"Login Failed\", attachment_type=AttachmentType.PNG)\n                assert False\n    \n        except Exception as e:\n            self.logger.error(f\"Error during navigation or login function: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(), name=\"Error occurred\", attachment_type=AttachmentType.PNG)\n>           assert False\nE           assert False\n\ntestCases\\Logout Test Cases\\TC_LG_003.py:85: AssertionError"}, "attachments": [{"name": "After login: My Account page", "source": "b1d1e819-5038-4d78-990c-12847a6376ba-attachment.png", "type": "image/png"}, {"name": "Session Lost", "source": "46829032-4878-48f3-90d3-fe8eb05edcc5-attachment.png", "type": "image/png"}, {"name": "Error occurred", "source": "10702d60-d6d6-47e1-840e-9823fe6b1737-attachment.png", "type": "image/png"}, {"name": "log", "source": "1f37c120-f43a-4415-9124-1f8547811795-attachment.txt", "type": "text/plain"}], "start": 1740940727082, "stop": 1740940770353, "uuid": "5a7c3497-0a6e-4751-a133-8869b380c4a6", "historyId": "365f1b05d96d82d120ff5f8f0fc2d2a9", "testCaseId": "365f1b05d96d82d120ff5f8f0fc2d2a9", "fullName": "testCases.Logout Test Cases.TC_LG_003.Test_TC_LG_003#test_TC_LG_003", "labels": [{"name": "parentSuite", "value": "testCases.Logout Test Cases"}, {"name": "suite", "value": "TC_LG_003"}, {"name": "subSuite", "value": "Test_TC_LG_003"}, {"name": "host", "value": "DESKTOP-DL1JSBI"}, {"name": "thread", "value": "8456-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testCases.Logout Test Cases.TC_LG_003"}]}