<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8"/>
    <title id="head-title">test_reg_succ_continue1</title>
      <link href="assets\style.css" rel="stylesheet" type="text/css"/>
  </head>
  <body>
    <h1 id="title">test_reg_succ_continue1</h1>
    <p>Report generated on 13-Feb-2025 at 01:09:59 by <a href="https://pypi.python.org/pypi/pytest-html">pytest-html</a>
        v4.1.1</p>
    <div id="environment-header">
      <h2>Environment</h2>
    </div>
    <table id="environment"></table>
    <!-- TEMPLATES -->
      <template id="template_environment_row">
      <tr>
        <td></td>
        <td></td>
      </tr>
    </template>
    <template id="template_results-table__body--empty">
      <tbody class="results-table-row">
        <tr id="not-found-message">
          <td colspan="4">No results found. Check the filters.</th>
        </tr>
    </template>
    <template id="template_results-table__tbody">
      <tbody class="results-table-row">
        <tr class="collapsible">
        </tr>
        <tr class="extras-row">
          <td class="extra" colspan="4">
            <div class="extraHTML"></div>
            <div class="media">
              <div class="media-container">
                  <div class="media-container__nav--left"><</div>
                  <div class="media-container__viewport">
                    <img src="" />
                    <video controls>
                      <source src="" type="video/mp4">
                    </video>
                  </div>
                  <div class="media-container__nav--right">></div>
                </div>
                <div class="media__name"></div>
                <div class="media__counter"></div>
            </div>
            <div class="logwrapper">
              <div class="logexpander"></div>
              <div class="log"></div>
            </div>
          </td>
        </tr>
      </tbody>
    </template>
    <!-- END TEMPLATES -->
    <div class="summary">
      <div class="summary__data">
        <h2>Summary</h2>
        <div class="additional-summary prefix">
        </div>
        <p class="run-count">1 test took 00:00:39.</p>
        <p class="filter">(Un)check the boxes to filter the results.</p>
        <div class="summary__reload">
          <div class="summary__reload__button hidden" onclick="location.reload()">
            <div>There are still tests running. <br />Reload this page to get the latest results!</div>
          </div>
        </div>
        <div class="summary__spacer"></div>
        <div class="controls">
          <div class="filters">
            <input checked="true" class="filter" name="filter_checkbox" type="checkbox" data-test-result="failed" disabled/>
            <span class="failed">0 Failed,</span>
            <input checked="true" class="filter" name="filter_checkbox" type="checkbox" data-test-result="passed" />
            <span class="passed">1 Passed,</span>
            <input checked="true" class="filter" name="filter_checkbox" type="checkbox" data-test-result="skipped" disabled/>
            <span class="skipped">0 Skipped,</span>
            <input checked="true" class="filter" name="filter_checkbox" type="checkbox" data-test-result="xfailed" disabled/>
            <span class="xfailed">0 Expected failures,</span>
            <input checked="true" class="filter" name="filter_checkbox" type="checkbox" data-test-result="xpassed" disabled/>
            <span class="xpassed">0 Unexpected passes,</span>
            <input checked="true" class="filter" name="filter_checkbox" type="checkbox" data-test-result="error" disabled/>
            <span class="error">0 Errors,</span>
            <input checked="true" class="filter" name="filter_checkbox" type="checkbox" data-test-result="rerun" disabled/>
            <span class="rerun">0 Reruns</span>
          </div>
          <div class="collapse">
            <button id="show_all_details">Show all details</button>&nbsp;/&nbsp;<button id="hide_all_details">Hide all details</button>
          </div>
        </div>
      </div>
      <div class="additional-summary summary">
      </div>
      <div class="additional-summary postfix">
      </div>
    </div>
    <table id="results-table">
      <thead id="results-table-head">
        <tr>
          <th class="sortable" data-column-type="result">Result</th>
          <th class="sortable" data-column-type="testId">Test</th>
          <th class="sortable" data-column-type="duration">Duration</th>
          <th>Links</th>
        </tr>
      </thead>
    </table>
  </body>
  <footer>
    <div id="data-container" data-jsonblob="{&#34;environment&#34;: {&#34;Python&#34;: &#34;3.12.3&#34;, &#34;Platform&#34;: &#34;Windows-11-10.0.22631-SP0&#34;, &#34;Packages&#34;: {&#34;pytest&#34;: &#34;8.3.4&#34;, &#34;pluggy&#34;: &#34;1.5.0&#34;}, &#34;Plugins&#34;: {&#34;allure-pytest&#34;: &#34;2.13.5&#34;, &#34;html&#34;: &#34;4.1.1&#34;, &#34;metadata&#34;: &#34;3.1.1&#34;, &#34;xdist&#34;: &#34;3.6.1&#34;}, &#34;JAVA_HOME&#34;: &#34;C:\\OpenJDK21U-jdk_x64_windows_hotspot_21.0.6_7.msi&#34;}, &#34;tests&#34;: {&#34;testCases/test_003_registration_succ_with_continue.py::Test_reg_succ_continue::test_reg&#34;: [{&#34;extras&#34;: [], &#34;result&#34;: &#34;Passed&#34;, &#34;testId&#34;: &#34;testCases/test_003_registration_succ_with_continue.py::Test_reg_succ_continue::test_reg&#34;, &#34;duration&#34;: &#34;00:00:39&#34;, &#34;resultsTableRow&#34;: [&#34;&lt;td class=\&#34;col-result\&#34;&gt;Passed&lt;/td&gt;&#34;, &#34;&lt;td class=\&#34;col-testId\&#34;&gt;testCases/test_003_registration_succ_with_continue.py::Test_reg_succ_continue::test_reg&lt;/td&gt;&#34;, &#34;&lt;td class=\&#34;col-duration\&#34;&gt;00:00:39&lt;/td&gt;&#34;, &#34;&lt;td class=\&#34;col-links\&#34;&gt;&lt;/td&gt;&#34;], &#34;log&#34;: &#34;------------------------------ Captured log setup ------------------------------\nINFO     WDM:logger.py:11 ====== WebDriver manager ======\nINFO     WDM:logger.py:11 Get LATEST edgedriver version for Edge 133.0.3065\nDEBUG    urllib3.connectionpool:connectionpool.py:1049 Starting new HTTPS connection (1): msedgedriver.azureedge.net:443\nDEBUG    urllib3.connectionpool:connectionpool.py:544 https://msedgedriver.azureedge.net:443 &amp;quot;GET /LATEST_RELEASE_133_WINDOWS HTTP/1.1&amp;quot; 200 32\nDEBUG    charset_normalizer:api.py:490 Encoding detection: utf_16 is most likely the one as we detected a BOM or SIG within the beginning of the sequence.\nINFO     WDM:logger.py:11 Get LATEST edgedriver version for Edge 133.0.3065\nDEBUG    urllib3.connectionpool:connectionpool.py:1049 Starting new HTTPS connection (1): msedgedriver.azureedge.net:443\nDEBUG    urllib3.connectionpool:connectionpool.py:544 https://msedgedriver.azureedge.net:443 &amp;quot;GET /LATEST_RELEASE_133_WINDOWS HTTP/1.1&amp;quot; 200 32\nDEBUG    charset_normalizer:api.py:490 Encoding detection: utf_16 is most likely the one as we detected a BOM or SIG within the beginning of the sequence.\nINFO     WDM:logger.py:11 Get LATEST edgedriver version for Edge 133.0.3065\nDEBUG    urllib3.connectionpool:connectionpool.py:1049 Starting new HTTPS connection (1): msedgedriver.azureedge.net:443\nDEBUG    urllib3.connectionpool:connectionpool.py:544 https://msedgedriver.azureedge.net:443 &amp;quot;GET /LATEST_RELEASE_133_WINDOWS HTTP/1.1&amp;quot; 200 32\nDEBUG    charset_normalizer:api.py:490 Encoding detection: utf_16 is most likely the one as we detected a BOM or SIG within the beginning of the sequence.\nINFO     WDM:logger.py:11 About to download new driver from https://msedgedriver.azureedge.net/133.0.3065.59/edgedriver_win64.zip\nDEBUG    urllib3.connectionpool:connectionpool.py:1049 Starting new HTTPS connection (1): msedgedriver.azureedge.net:443\nDEBUG    urllib3.connectionpool:connectionpool.py:544 https://msedgedriver.azureedge.net:443 &amp;quot;GET /133.0.3065.59/edgedriver_win64.zip HTTP/1.1&amp;quot; 200 10396450\nINFO     WDM:logger.py:11 Driver downloading response is 200\nINFO     WDM:logger.py:11 Get LATEST edgedriver version for Edge 133.0.3065\nDEBUG    urllib3.connectionpool:connectionpool.py:1049 Starting new HTTPS connection (1): msedgedriver.azureedge.net:443\nDEBUG    urllib3.connectionpool:connectionpool.py:544 https://msedgedriver.azureedge.net:443 &amp;quot;GET /LATEST_RELEASE_133_WINDOWS HTTP/1.1&amp;quot; 200 32\nDEBUG    charset_normalizer:api.py:490 Encoding detection: utf_16 is most likely the one as we detected a BOM or SIG within the beginning of the sequence.\nINFO     WDM:logger.py:11 Driver has been saved in cache [C:\\Users\\Lenovo\\.wdm\\drivers\\edgedriver\\win64\\133.0.3065.59]\nDEBUG    selenium.webdriver.common.driver_finder:driver_finder.py:60 Skipping Selenium Manager; path to MicrosoftEdge driver specified in Service class: C:\\Users\\Lenovo\\.wdm\\drivers\\edgedriver\\win64\\133.0.3065.59\\msedgedriver.exe\nDEBUG    selenium.webdriver.common.service:service.py:225 Started executable: `C:\\Users\\Lenovo\\.wdm\\drivers\\edgedriver\\win64\\133.0.3065.59\\msedgedriver.exe` in a child process with pid: 6104 using 0 to output -3\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:403 POST http://localhost:54815/session {&amp;#x27;capabilities&amp;#x27;: {&amp;#x27;firstMatch&amp;#x27;: [{}], &amp;#x27;alwaysMatch&amp;#x27;: {&amp;#x27;browserName&amp;#x27;: &amp;#x27;MicrosoftEdge&amp;#x27;, &amp;#x27;pageLoadStrategy&amp;#x27;: &amp;lt;PageLoadStrategy.normal: &amp;#x27;normal&amp;#x27;&amp;gt;, &amp;#x27;ms:edgeOptions&amp;#x27;: {&amp;#x27;extensions&amp;#x27;: [], &amp;#x27;args&amp;#x27;: []}}}}\nDEBUG    urllib3.connectionpool:connectionpool.py:241 Starting new HTTP connection (1): localhost:54815\nDEBUG    urllib3.connectionpool:connectionpool.py:544 http://localhost:54815 &amp;quot;POST /session HTTP/1.1&amp;quot; 200 0\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:436 Remote response: status=200 | data={&amp;quot;value&amp;quot;:{&amp;quot;capabilities&amp;quot;:{&amp;quot;acceptInsecureCerts&amp;quot;:false,&amp;quot;browserName&amp;quot;:&amp;quot;MicrosoftEdge&amp;quot;,&amp;quot;browserVersion&amp;quot;:&amp;quot;133.0.3065.59&amp;quot;,&amp;quot;fedcm:accounts&amp;quot;:true,&amp;quot;ms:edgeOptions&amp;quot;:{&amp;quot;debuggerAddress&amp;quot;:&amp;quot;localhost:54819&amp;quot;},&amp;quot;msedge&amp;quot;:{&amp;quot;msedgedriverVersion&amp;quot;:&amp;quot;133.0.3065.59 (3b8acd719957f1d1c93e364cb8794b3920fda271)&amp;quot;,&amp;quot;userDataDir&amp;quot;:&amp;quot;C:\\\\Users\\\\Lenovo\\\\AppData\\\\Local\\\\Temp\\\\scoped_dir6104_1273706516&amp;quot;},&amp;quot;networkConnectionEnabled&amp;quot;:false,&amp;quot;pageLoadStrategy&amp;quot;:&amp;quot;normal&amp;quot;,&amp;quot;platformName&amp;quot;:&amp;quot;windows&amp;quot;,&amp;quot;proxy&amp;quot;:{},&amp;quot;setWindowRect&amp;quot;:true,&amp;quot;strictFileInteractability&amp;quot;:false,&amp;quot;timeouts&amp;quot;:{&amp;quot;implicit&amp;quot;:0,&amp;quot;pageLoad&amp;quot;:300000,&amp;quot;script&amp;quot;:30000},&amp;quot;unhandledPromptBehavior&amp;quot;:&amp;quot;dismiss and notify&amp;quot;,&amp;quot;webauthn:extension:credBlob&amp;quot;:true,&amp;quot;webauthn:extension:largeBlob&amp;quot;:true,&amp;quot;webauthn:extension:minPinLength&amp;quot;:true,&amp;quot;webauthn:extension:prf&amp;quot;:true,&amp;quot;webauthn:virtualAuthenticators&amp;quot;:true},&amp;quot;sessionId&amp;quot;:&amp;quot;9ff285967bdce18e79c3ad7177321d6b&amp;quot;}} | headers=HTTPHeaderDict({&amp;#x27;Content-Length&amp;#x27;: &amp;#x27;854&amp;#x27;, &amp;#x27;Content-Type&amp;#x27;: &amp;#x27;application/json; charset=utf-8&amp;#x27;, &amp;#x27;cache-control&amp;#x27;: &amp;#x27;no-cache&amp;#x27;})\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:465 Finished Request\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:403 POST http://localhost:54815/session/9ff285967bdce18e79c3ad7177321d6b/window/maximize {}\nDEBUG    urllib3.connectionpool:connectionpool.py:544 http://localhost:54815 &amp;quot;POST /session/9ff285967bdce18e79c3ad7177321d6b/window/maximize HTTP/1.1&amp;quot; 200 0\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:436 Remote response: status=200 | data={&amp;quot;value&amp;quot;:{&amp;quot;height&amp;quot;:688,&amp;quot;width&amp;quot;:1296,&amp;quot;x&amp;quot;:-8,&amp;quot;y&amp;quot;:-8}} | headers=HTTPHeaderDict({&amp;#x27;Content-Length&amp;#x27;: &amp;#x27;51&amp;#x27;, &amp;#x27;Content-Type&amp;#x27;: &amp;#x27;application/json; charset=utf-8&amp;#x27;, &amp;#x27;cache-control&amp;#x27;: &amp;#x27;no-cache&amp;#x27;})\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:465 Finished Request\n\n------------------------------ Captured log call -------------------------------\nINFO     root:test_003_registration_succ_with_continue.py:16 ** Setting the browser.......... **\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:403 POST http://localhost:54815/session/9ff285967bdce18e79c3ad7177321d6b/url {&amp;#x27;url&amp;#x27;: &amp;#x27;https://naveenautomationlabs.com/opencart/&amp;#x27;}\nDEBUG    urllib3.connectionpool:connectionpool.py:544 http://localhost:54815 &amp;quot;POST /session/9ff285967bdce18e79c3ad7177321d6b/url HTTP/1.1&amp;quot; 200 0\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:436 Remote response: status=200 | data={&amp;quot;value&amp;quot;:null} | headers=HTTPHeaderDict({&amp;#x27;Content-Length&amp;#x27;: &amp;#x27;14&amp;#x27;, &amp;#x27;Content-Type&amp;#x27;: &amp;#x27;application/json; charset=utf-8&amp;#x27;, &amp;#x27;cache-control&amp;#x27;: &amp;#x27;no-cache&amp;#x27;})\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:465 Finished Request\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:403 POST http://localhost:54815/session/9ff285967bdce18e79c3ad7177321d6b/window/maximize {}\nDEBUG    urllib3.connectionpool:connectionpool.py:544 http://localhost:54815 &amp;quot;POST /session/9ff285967bdce18e79c3ad7177321d6b/window/maximize HTTP/1.1&amp;quot; 200 0\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:436 Remote response: status=200 | data={&amp;quot;value&amp;quot;:{&amp;quot;height&amp;quot;:688,&amp;quot;width&amp;quot;:1296,&amp;quot;x&amp;quot;:-8,&amp;quot;y&amp;quot;:-8}} | headers=HTTPHeaderDict({&amp;#x27;Content-Length&amp;#x27;: &amp;#x27;51&amp;#x27;, &amp;#x27;Content-Type&amp;#x27;: &amp;#x27;application/json; charset=utf-8&amp;#x27;, &amp;#x27;cache-control&amp;#x27;: &amp;#x27;no-cache&amp;#x27;})\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:465 Finished Request\nINFO     root:test_003_registration_succ_with_continue.py:21 ** Driver Initiated.......... **\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:403 POST http://localhost:54815/session/9ff285967bdce18e79c3ad7177321d6b/element {&amp;#x27;using&amp;#x27;: &amp;#x27;xpath&amp;#x27;, &amp;#x27;value&amp;#x27;: &amp;quot;//span[normalize-space()=&amp;#x27;My Account&amp;#x27;]&amp;quot;}\nDEBUG    urllib3.connectionpool:connectionpool.py:544 http://localhost:54815 &amp;quot;POST /session/9ff285967bdce18e79c3ad7177321d6b/element HTTP/1.1&amp;quot; 200 0\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:436 Remote response: status=200 | data={&amp;quot;value&amp;quot;:{&amp;quot;element-6066-11e4-a52e-4f735466cecf&amp;quot;:&amp;quot;f.1F5E2A99A9DE875E5AD2BA5A7793BD7F.d.A9A5D08893E9292D33D54BF2DB6224EA.e.48&amp;quot;}} | headers=HTTPHeaderDict({&amp;#x27;Content-Length&amp;#x27;: &amp;#x27;126&amp;#x27;, &amp;#x27;Content-Type&amp;#x27;: &amp;#x27;application/json; charset=utf-8&amp;#x27;, &amp;#x27;cache-control&amp;#x27;: &amp;#x27;no-cache&amp;#x27;})\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:465 Finished Request\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:403 POST http://localhost:54815/session/9ff285967bdce18e79c3ad7177321d6b/execute/sync {&amp;#x27;script&amp;#x27;: &amp;#x27;/* isDisplayed */return (function(){return (function(){var g=this||self;\\nfunction aa(a){var b=typeof...&amp;#x27;, &amp;#x27;args&amp;#x27;: [{&amp;#x27;element-6066-11e4-a52e-4f735466cecf&amp;#x27;: &amp;#x27;f.1F5E2A99A9DE875E5AD2BA5A7793BD7F.d.A9A5D08893E9292D33D54BF2DB6224EA.e.48&amp;#x27;}]}\nDEBUG    urllib3.connectionpool:connectionpool.py:544 http://localhost:54815 &amp;quot;POST /session/9ff285967bdce18e79c3ad7177321d6b/execute/sync HTTP/1.1&amp;quot; 200 0\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:436 Remote response: status=200 | data={&amp;quot;value&amp;quot;:true} | headers=HTTPHeaderDict({&amp;#x27;Content-Length&amp;#x27;: &amp;#x27;14&amp;#x27;, &amp;#x27;Content-Type&amp;#x27;: &amp;#x27;application/json; charset=utf-8&amp;#x27;, &amp;#x27;cache-control&amp;#x27;: &amp;#x27;no-cache&amp;#x27;})\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:465 Finished Request\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:403 GET http://localhost:54815/session/9ff285967bdce18e79c3ad7177321d6b/element/f.1F5E2A99A9DE875E5AD2BA5A7793BD7F.d.A9A5D08893E9292D33D54BF2DB6224EA.e.48/enabled {}\nDEBUG    urllib3.connectionpool:connectionpool.py:544 http://localhost:54815 &amp;quot;GET /session/9ff285967bdce18e79c3ad7177321d6b/element/f.1F5E2A99A9DE875E5AD2BA5A7793BD7F.d.A9A5D08893E9292D33D54BF2DB6224EA.e.48/enabled HTTP/1.1&amp;quot; 200 0\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:436 Remote response: status=200 | data={&amp;quot;value&amp;quot;:true} | headers=HTTPHeaderDict({&amp;#x27;Content-Length&amp;#x27;: &amp;#x27;14&amp;#x27;, &amp;#x27;Content-Type&amp;#x27;: &amp;#x27;application/json; charset=utf-8&amp;#x27;, &amp;#x27;cache-control&amp;#x27;: &amp;#x27;no-cache&amp;#x27;})\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:465 Finished Request\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:403 POST http://localhost:54815/session/9ff285967bdce18e79c3ad7177321d6b/element/f.1F5E2A99A9DE875E5AD2BA5A7793BD7F.d.A9A5D08893E9292D33D54BF2DB6224EA.e.48/click {}\nDEBUG    urllib3.connectionpool:connectionpool.py:544 http://localhost:54815 &amp;quot;POST /session/9ff285967bdce18e79c3ad7177321d6b/element/f.1F5E2A99A9DE875E5AD2BA5A7793BD7F.d.A9A5D08893E9292D33D54BF2DB6224EA.e.48/click HTTP/1.1&amp;quot; 200 0\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:436 Remote response: status=200 | data={&amp;quot;value&amp;quot;:null} | headers=HTTPHeaderDict({&amp;#x27;Content-Length&amp;#x27;: &amp;#x27;14&amp;#x27;, &amp;#x27;Content-Type&amp;#x27;: &amp;#x27;application/json; charset=utf-8&amp;#x27;, &amp;#x27;cache-control&amp;#x27;: &amp;#x27;no-cache&amp;#x27;})\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:465 Finished Request\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:403 POST http://localhost:54815/session/9ff285967bdce18e79c3ad7177321d6b/element {&amp;#x27;using&amp;#x27;: &amp;#x27;xpath&amp;#x27;, &amp;#x27;value&amp;#x27;: &amp;quot;//a[normalize-space()=&amp;#x27;Register&amp;#x27;]&amp;quot;}\nDEBUG    urllib3.connectionpool:connectionpool.py:544 http://localhost:54815 &amp;quot;POST /session/9ff285967bdce18e79c3ad7177321d6b/element HTTP/1.1&amp;quot; 200 0\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:436 Remote response: status=200 | data={&amp;quot;value&amp;quot;:{&amp;quot;element-6066-11e4-a52e-4f735466cecf&amp;quot;:&amp;quot;f.1F5E2A99A9DE875E5AD2BA5A7793BD7F.d.A9A5D08893E9292D33D54BF2DB6224EA.e.50&amp;quot;}} | headers=HTTPHeaderDict({&amp;#x27;Content-Length&amp;#x27;: &amp;#x27;126&amp;#x27;, &amp;#x27;Content-Type&amp;#x27;: &amp;#x27;application/json; charset=utf-8&amp;#x27;, &amp;#x27;cache-control&amp;#x27;: &amp;#x27;no-cache&amp;#x27;})\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:465 Finished Request\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:403 POST http://localhost:54815/session/9ff285967bdce18e79c3ad7177321d6b/execute/sync {&amp;#x27;script&amp;#x27;: &amp;#x27;/* isDisplayed */return (function(){return (function(){var g=this||self;\\nfunction aa(a){var b=typeof...&amp;#x27;, &amp;#x27;args&amp;#x27;: [{&amp;#x27;element-6066-11e4-a52e-4f735466cecf&amp;#x27;: &amp;#x27;f.1F5E2A99A9DE875E5AD2BA5A7793BD7F.d.A9A5D08893E9292D33D54BF2DB6224EA.e.50&amp;#x27;}]}\nDEBUG    urllib3.connectionpool:connectionpool.py:544 http://localhost:54815 &amp;quot;POST /session/9ff285967bdce18e79c3ad7177321d6b/execute/sync HTTP/1.1&amp;quot; 200 0\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:436 Remote response: status=200 | data={&amp;quot;value&amp;quot;:true} | headers=HTTPHeaderDict({&amp;#x27;Content-Length&amp;#x27;: &amp;#x27;14&amp;#x27;, &amp;#x27;Content-Type&amp;#x27;: &amp;#x27;application/json; charset=utf-8&amp;#x27;, &amp;#x27;cache-control&amp;#x27;: &amp;#x27;no-cache&amp;#x27;})\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:465 Finished Request\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:403 POST http://localhost:54815/session/9ff285967bdce18e79c3ad7177321d6b/element {&amp;#x27;using&amp;#x27;: &amp;#x27;xpath&amp;#x27;, &amp;#x27;value&amp;#x27;: &amp;quot;//a[normalize-space()=&amp;#x27;Register&amp;#x27;]&amp;quot;}\nDEBUG    urllib3.connectionpool:connectionpool.py:544 http://localhost:54815 &amp;quot;POST /session/9ff285967bdce18e79c3ad7177321d6b/element HTTP/1.1&amp;quot; 200 0\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:436 Remote response: status=200 | data={&amp;quot;value&amp;quot;:{&amp;quot;element-6066-11e4-a52e-4f735466cecf&amp;quot;:&amp;quot;f.1F5E2A99A9DE875E5AD2BA5A7793BD7F.d.A9A5D08893E9292D33D54BF2DB6224EA.e.50&amp;quot;}} | headers=HTTPHeaderDict({&amp;#x27;Content-Length&amp;#x27;: &amp;#x27;126&amp;#x27;, &amp;#x27;Content-Type&amp;#x27;: &amp;#x27;application/json; charset=utf-8&amp;#x27;, &amp;#x27;cache-control&amp;#x27;: &amp;#x27;no-cache&amp;#x27;})\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:465 Finished Request\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:403 GET http://localhost:54815/session/9ff285967bdce18e79c3ad7177321d6b/element/f.1F5E2A99A9DE875E5AD2BA5A7793BD7F.d.A9A5D08893E9292D33D54BF2DB6224EA.e.50/enabled {}\nDEBUG    urllib3.connectionpool:connectionpool.py:544 http://localhost:54815 &amp;quot;GET /session/9ff285967bdce18e79c3ad7177321d6b/element/f.1F5E2A99A9DE875E5AD2BA5A7793BD7F.d.A9A5D08893E9292D33D54BF2DB6224EA.e.50/enabled HTTP/1.1&amp;quot; 200 0\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:436 Remote response: status=200 | data={&amp;quot;value&amp;quot;:true} | headers=HTTPHeaderDict({&amp;#x27;Content-Length&amp;#x27;: &amp;#x27;14&amp;#x27;, &amp;#x27;Content-Type&amp;#x27;: &amp;#x27;application/json; charset=utf-8&amp;#x27;, &amp;#x27;cache-control&amp;#x27;: &amp;#x27;no-cache&amp;#x27;})\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:465 Finished Request\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:403 POST http://localhost:54815/session/9ff285967bdce18e79c3ad7177321d6b/element {&amp;#x27;using&amp;#x27;: &amp;#x27;xpath&amp;#x27;, &amp;#x27;value&amp;#x27;: &amp;quot;//a[normalize-space()=&amp;#x27;Register&amp;#x27;]&amp;quot;}\nDEBUG    urllib3.connectionpool:connectionpool.py:544 http://localhost:54815 &amp;quot;POST /session/9ff285967bdce18e79c3ad7177321d6b/element HTTP/1.1&amp;quot; 200 0\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:436 Remote response: status=200 | data={&amp;quot;value&amp;quot;:{&amp;quot;element-6066-11e4-a52e-4f735466cecf&amp;quot;:&amp;quot;f.1F5E2A99A9DE875E5AD2BA5A7793BD7F.d.A9A5D08893E9292D33D54BF2DB6224EA.e.50&amp;quot;}} | headers=HTTPHeaderDict({&amp;#x27;Content-Length&amp;#x27;: &amp;#x27;126&amp;#x27;, &amp;#x27;Content-Type&amp;#x27;: &amp;#x27;application/json; charset=utf-8&amp;#x27;, &amp;#x27;cache-control&amp;#x27;: &amp;#x27;no-cache&amp;#x27;})\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:465 Finished Request\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:403 POST http://localhost:54815/session/9ff285967bdce18e79c3ad7177321d6b/execute/sync {&amp;#x27;script&amp;#x27;: &amp;#x27;/* isDisplayed */return (function(){return (function(){var g=this||self;\\nfunction aa(a){var b=typeof...&amp;#x27;, &amp;#x27;args&amp;#x27;: [{&amp;#x27;element-6066-11e4-a52e-4f735466cecf&amp;#x27;: &amp;#x27;f.1F5E2A99A9DE875E5AD2BA5A7793BD7F.d.A9A5D08893E9292D33D54BF2DB6224EA.e.50&amp;#x27;}]}\nDEBUG    urllib3.connectionpool:connectionpool.py:544 http://localhost:54815 &amp;quot;POST /session/9ff285967bdce18e79c3ad7177321d6b/execute/sync HTTP/1.1&amp;quot; 200 0\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:436 Remote response: status=200 | data={&amp;quot;value&amp;quot;:true} | headers=HTTPHeaderDict({&amp;#x27;Content-Length&amp;#x27;: &amp;#x27;14&amp;#x27;, &amp;#x27;Content-Type&amp;#x27;: &amp;#x27;application/json; charset=utf-8&amp;#x27;, &amp;#x27;cache-control&amp;#x27;: &amp;#x27;no-cache&amp;#x27;})\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:465 Finished Request\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:403 GET http://localhost:54815/session/9ff285967bdce18e79c3ad7177321d6b/element/f.1F5E2A99A9DE875E5AD2BA5A7793BD7F.d.A9A5D08893E9292D33D54BF2DB6224EA.e.50/enabled {}\nDEBUG    urllib3.connectionpool:connectionpool.py:544 http://localhost:54815 &amp;quot;GET /session/9ff285967bdce18e79c3ad7177321d6b/element/f.1F5E2A99A9DE875E5AD2BA5A7793BD7F.d.A9A5D08893E9292D33D54BF2DB6224EA.e.50/enabled HTTP/1.1&amp;quot; 200 0\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:436 Remote response: status=200 | data={&amp;quot;value&amp;quot;:true} | headers=HTTPHeaderDict({&amp;#x27;Content-Length&amp;#x27;: &amp;#x27;14&amp;#x27;, &amp;#x27;Content-Type&amp;#x27;: &amp;#x27;application/json; charset=utf-8&amp;#x27;, &amp;#x27;cache-control&amp;#x27;: &amp;#x27;no-cache&amp;#x27;})\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:465 Finished Request\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:403 POST http://localhost:54815/session/9ff285967bdce18e79c3ad7177321d6b/execute/sync {&amp;#x27;script&amp;#x27;: &amp;#x27;arguments[0].scrollIntoView(true);&amp;#x27;, &amp;#x27;args&amp;#x27;: [{&amp;#x27;element-6066-11e4-a52e-4f735466cecf&amp;#x27;: &amp;#x27;f.1F5E2A99A9DE875E5AD2BA5A7793BD7F.d.A9A5D08893E9292D33D54BF2DB6224EA.e.50&amp;#x27;}]}\nDEBUG    urllib3.connectionpool:connectionpool.py:544 http://localhost:54815 &amp;quot;POST /session/9ff285967bdce18e79c3ad7177321d6b/execute/sync HTTP/1.1&amp;quot; 200 0\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:436 Remote response: status=200 | data={&amp;quot;value&amp;quot;:null} | headers=HTTPHeaderDict({&amp;#x27;Content-Length&amp;#x27;: &amp;#x27;14&amp;#x27;, &amp;#x27;Content-Type&amp;#x27;: &amp;#x27;application/json; charset=utf-8&amp;#x27;, &amp;#x27;cache-control&amp;#x27;: &amp;#x27;no-cache&amp;#x27;})\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:465 Finished Request\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:403 POST http://localhost:54815/session/9ff285967bdce18e79c3ad7177321d6b/element/f.1F5E2A99A9DE875E5AD2BA5A7793BD7F.d.A9A5D08893E9292D33D54BF2DB6224EA.e.50/click {}\nDEBUG    urllib3.connectionpool:connectionpool.py:544 http://localhost:54815 &amp;quot;POST /session/9ff285967bdce18e79c3ad7177321d6b/element/f.1F5E2A99A9DE875E5AD2BA5A7793BD7F.d.A9A5D08893E9292D33D54BF2DB6224EA.e.50/click HTTP/1.1&amp;quot; 200 0\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:436 Remote response: status=200 | data={&amp;quot;value&amp;quot;:null} | headers=HTTPHeaderDict({&amp;#x27;Content-Length&amp;#x27;: &amp;#x27;14&amp;#x27;, &amp;#x27;Content-Type&amp;#x27;: &amp;#x27;application/json; charset=utf-8&amp;#x27;, &amp;#x27;cache-control&amp;#x27;: &amp;#x27;no-cache&amp;#x27;})\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:465 Finished Request\nINFO     root:test_003_registration_succ_with_continue.py:26 ** Register clicked .......... **\nINFO     root:test_003_registration_succ_with_continue.py:27 ** Registration started.......... **\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:403 POST http://localhost:54815/session/9ff285967bdce18e79c3ad7177321d6b/element {&amp;#x27;using&amp;#x27;: &amp;#x27;xpath&amp;#x27;, &amp;#x27;value&amp;#x27;: &amp;quot;//input[@id=&amp;#x27;input-firstname&amp;#x27;]&amp;quot;}\nDEBUG    urllib3.connectionpool:connectionpool.py:544 http://localhost:54815 &amp;quot;POST /session/9ff285967bdce18e79c3ad7177321d6b/element HTTP/1.1&amp;quot; 200 0\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:436 Remote response: status=200 | data={&amp;quot;value&amp;quot;:{&amp;quot;element-6066-11e4-a52e-4f735466cecf&amp;quot;:&amp;quot;f.1F5E2A99A9DE875E5AD2BA5A7793BD7F.d.4BBB9F88C0959ED3D52B17EA048F5AE5.e.56&amp;quot;}} | headers=HTTPHeaderDict({&amp;#x27;Content-Length&amp;#x27;: &amp;#x27;126&amp;#x27;, &amp;#x27;Content-Type&amp;#x27;: &amp;#x27;application/json; charset=utf-8&amp;#x27;, &amp;#x27;cache-control&amp;#x27;: &amp;#x27;no-cache&amp;#x27;})\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:465 Finished Request\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:403 POST http://localhost:54815/session/9ff285967bdce18e79c3ad7177321d6b/element/f.1F5E2A99A9DE875E5AD2BA5A7793BD7F.d.4BBB9F88C0959ED3D52B17EA048F5AE5.e.56/value {&amp;#x27;text&amp;#x27;: &amp;#x27;raju&amp;#x27;, &amp;#x27;value&amp;#x27;: [&amp;#x27;r&amp;#x27;, &amp;#x27;a&amp;#x27;, &amp;#x27;j&amp;#x27;, &amp;#x27;u&amp;#x27;]}\nDEBUG    urllib3.connectionpool:connectionpool.py:544 http://localhost:54815 &amp;quot;POST /session/9ff285967bdce18e79c3ad7177321d6b/element/f.1F5E2A99A9DE875E5AD2BA5A7793BD7F.d.4BBB9F88C0959ED3D52B17EA048F5AE5.e.56/value HTTP/1.1&amp;quot; 200 0\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:436 Remote response: status=200 | data={&amp;quot;value&amp;quot;:null} | headers=HTTPHeaderDict({&amp;#x27;Content-Length&amp;#x27;: &amp;#x27;14&amp;#x27;, &amp;#x27;Content-Type&amp;#x27;: &amp;#x27;application/json; charset=utf-8&amp;#x27;, &amp;#x27;cache-control&amp;#x27;: &amp;#x27;no-cache&amp;#x27;})\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:465 Finished Request\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:403 POST http://localhost:54815/session/9ff285967bdce18e79c3ad7177321d6b/element {&amp;#x27;using&amp;#x27;: &amp;#x27;xpath&amp;#x27;, &amp;#x27;value&amp;#x27;: &amp;quot;//input[@id=&amp;#x27;input-lastname&amp;#x27;]&amp;quot;}\nDEBUG    urllib3.connectionpool:connectionpool.py:544 http://localhost:54815 &amp;quot;POST /session/9ff285967bdce18e79c3ad7177321d6b/element HTTP/1.1&amp;quot; 200 0\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:436 Remote response: status=200 | data={&amp;quot;value&amp;quot;:{&amp;quot;element-6066-11e4-a52e-4f735466cecf&amp;quot;:&amp;quot;f.1F5E2A99A9DE875E5AD2BA5A7793BD7F.d.4BBB9F88C0959ED3D52B17EA048F5AE5.e.57&amp;quot;}} | headers=HTTPHeaderDict({&amp;#x27;Content-Length&amp;#x27;: &amp;#x27;126&amp;#x27;, &amp;#x27;Content-Type&amp;#x27;: &amp;#x27;application/json; charset=utf-8&amp;#x27;, &amp;#x27;cache-control&amp;#x27;: &amp;#x27;no-cache&amp;#x27;})\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:465 Finished Request\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:403 POST http://localhost:54815/session/9ff285967bdce18e79c3ad7177321d6b/element/f.1F5E2A99A9DE875E5AD2BA5A7793BD7F.d.4BBB9F88C0959ED3D52B17EA048F5AE5.e.57/value {&amp;#x27;text&amp;#x27;: &amp;#x27;abcd&amp;#x27;, &amp;#x27;value&amp;#x27;: [&amp;#x27;a&amp;#x27;, &amp;#x27;b&amp;#x27;, &amp;#x27;c&amp;#x27;, &amp;#x27;d&amp;#x27;]}\nDEBUG    urllib3.connectionpool:connectionpool.py:544 http://localhost:54815 &amp;quot;POST /session/9ff285967bdce18e79c3ad7177321d6b/element/f.1F5E2A99A9DE875E5AD2BA5A7793BD7F.d.4BBB9F88C0959ED3D52B17EA048F5AE5.e.57/value HTTP/1.1&amp;quot; 200 0\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:436 Remote response: status=200 | data={&amp;quot;value&amp;quot;:null} | headers=HTTPHeaderDict({&amp;#x27;Content-Length&amp;#x27;: &amp;#x27;14&amp;#x27;, &amp;#x27;Content-Type&amp;#x27;: &amp;#x27;application/json; charset=utf-8&amp;#x27;, &amp;#x27;cache-control&amp;#x27;: &amp;#x27;no-cache&amp;#x27;})\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:465 Finished Request\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:403 POST http://localhost:54815/session/9ff285967bdce18e79c3ad7177321d6b/element {&amp;#x27;using&amp;#x27;: &amp;#x27;xpath&amp;#x27;, &amp;#x27;value&amp;#x27;: &amp;quot;//input[@id=&amp;#x27;input-email&amp;#x27;]&amp;quot;}\nDEBUG    urllib3.connectionpool:connectionpool.py:544 http://localhost:54815 &amp;quot;POST /session/9ff285967bdce18e79c3ad7177321d6b/element HTTP/1.1&amp;quot; 200 0\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:436 Remote response: status=200 | data={&amp;quot;value&amp;quot;:{&amp;quot;element-6066-11e4-a52e-4f735466cecf&amp;quot;:&amp;quot;f.1F5E2A99A9DE875E5AD2BA5A7793BD7F.d.4BBB9F88C0959ED3D52B17EA048F5AE5.e.58&amp;quot;}} | headers=HTTPHeaderDict({&amp;#x27;Content-Length&amp;#x27;: &amp;#x27;126&amp;#x27;, &amp;#x27;Content-Type&amp;#x27;: &amp;#x27;application/json; charset=utf-8&amp;#x27;, &amp;#x27;cache-control&amp;#x27;: &amp;#x27;no-cache&amp;#x27;})\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:465 Finished Request\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:403 POST http://localhost:54815/session/9ff285967bdce18e79c3ad7177321d6b/element/f.1F5E2A99A9DE875E5AD2BA5A7793BD7F.d.4BBB9F88C0959ED3D52B17EA048F5AE5.e.58/value {&amp;#x27;text&amp;#x27;: &amp;#x27;jikqo@mailinator.com&amp;#x27;, &amp;#x27;value&amp;#x27;: [&amp;#x27;j&amp;#x27;, &amp;#x27;i&amp;#x27;, &amp;#x27;k&amp;#x27;, &amp;#x27;q&amp;#x27;, &amp;#x27;o&amp;#x27;, &amp;#x27;@&amp;#x27;, &amp;#x27;m&amp;#x27;, &amp;#x27;a&amp;#x27;, &amp;#x27;i&amp;#x27;, &amp;#x27;l&amp;#x27;, &amp;#x27;i&amp;#x27;, &amp;#x27;n&amp;#x27;, &amp;#x27;a&amp;#x27;, &amp;#x27;t&amp;#x27;, &amp;#x27;o&amp;#x27;, &amp;#x27;r&amp;#x27;, &amp;#x27;.&amp;#x27;, &amp;#x27;c&amp;#x27;, &amp;#x27;o&amp;#x27;, &amp;#x27;m&amp;#x27;]}\nDEBUG    urllib3.connectionpool:connectionpool.py:544 http://localhost:54815 &amp;quot;POST /session/9ff285967bdce18e79c3ad7177321d6b/element/f.1F5E2A99A9DE875E5AD2BA5A7793BD7F.d.4BBB9F88C0959ED3D52B17EA048F5AE5.e.58/value HTTP/1.1&amp;quot; 200 0\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:436 Remote response: status=200 | data={&amp;quot;value&amp;quot;:null} | headers=HTTPHeaderDict({&amp;#x27;Content-Length&amp;#x27;: &amp;#x27;14&amp;#x27;, &amp;#x27;Content-Type&amp;#x27;: &amp;#x27;application/json; charset=utf-8&amp;#x27;, &amp;#x27;cache-control&amp;#x27;: &amp;#x27;no-cache&amp;#x27;})\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:465 Finished Request\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:403 POST http://localhost:54815/session/9ff285967bdce18e79c3ad7177321d6b/element {&amp;#x27;using&amp;#x27;: &amp;#x27;xpath&amp;#x27;, &amp;#x27;value&amp;#x27;: &amp;quot;//input[@id=&amp;#x27;input-telephone&amp;#x27;]&amp;quot;}\nDEBUG    urllib3.connectionpool:connectionpool.py:544 http://localhost:54815 &amp;quot;POST /session/9ff285967bdce18e79c3ad7177321d6b/element HTTP/1.1&amp;quot; 200 0\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:436 Remote response: status=200 | data={&amp;quot;value&amp;quot;:{&amp;quot;element-6066-11e4-a52e-4f735466cecf&amp;quot;:&amp;quot;f.1F5E2A99A9DE875E5AD2BA5A7793BD7F.d.4BBB9F88C0959ED3D52B17EA048F5AE5.e.59&amp;quot;}} | headers=HTTPHeaderDict({&amp;#x27;Content-Length&amp;#x27;: &amp;#x27;126&amp;#x27;, &amp;#x27;Content-Type&amp;#x27;: &amp;#x27;application/json; charset=utf-8&amp;#x27;, &amp;#x27;cache-control&amp;#x27;: &amp;#x27;no-cache&amp;#x27;})\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:465 Finished Request\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:403 POST http://localhost:54815/session/9ff285967bdce18e79c3ad7177321d6b/element/f.1F5E2A99A9DE875E5AD2BA5A7793BD7F.d.4BBB9F88C0959ED3D52B17EA048F5AE5.e.59/value {&amp;#x27;text&amp;#x27;: &amp;#x27;+1 (987) 654-3321&amp;#x27;, &amp;#x27;value&amp;#x27;: [&amp;#x27;+&amp;#x27;, &amp;#x27;1&amp;#x27;, &amp;#x27; &amp;#x27;, &amp;#x27;(&amp;#x27;, &amp;#x27;9&amp;#x27;, &amp;#x27;8&amp;#x27;, &amp;#x27;7&amp;#x27;, &amp;#x27;)&amp;#x27;, &amp;#x27; &amp;#x27;, &amp;#x27;6&amp;#x27;, &amp;#x27;5&amp;#x27;, &amp;#x27;4&amp;#x27;, &amp;#x27;-&amp;#x27;, &amp;#x27;3&amp;#x27;, &amp;#x27;3&amp;#x27;, &amp;#x27;2&amp;#x27;, &amp;#x27;1&amp;#x27;]}\nDEBUG    urllib3.connectionpool:connectionpool.py:544 http://localhost:54815 &amp;quot;POST /session/9ff285967bdce18e79c3ad7177321d6b/element/f.1F5E2A99A9DE875E5AD2BA5A7793BD7F.d.4BBB9F88C0959ED3D52B17EA048F5AE5.e.59/value HTTP/1.1&amp;quot; 200 0\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:436 Remote response: status=200 | data={&amp;quot;value&amp;quot;:null} | headers=HTTPHeaderDict({&amp;#x27;Content-Length&amp;#x27;: &amp;#x27;14&amp;#x27;, &amp;#x27;Content-Type&amp;#x27;: &amp;#x27;application/json; charset=utf-8&amp;#x27;, &amp;#x27;cache-control&amp;#x27;: &amp;#x27;no-cache&amp;#x27;})\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:465 Finished Request\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:403 POST http://localhost:54815/session/9ff285967bdce18e79c3ad7177321d6b/element {&amp;#x27;using&amp;#x27;: &amp;#x27;xpath&amp;#x27;, &amp;#x27;value&amp;#x27;: &amp;quot;//input[@id=&amp;#x27;input-password&amp;#x27;]&amp;quot;}\nDEBUG    urllib3.connectionpool:connectionpool.py:544 http://localhost:54815 &amp;quot;POST /session/9ff285967bdce18e79c3ad7177321d6b/element HTTP/1.1&amp;quot; 200 0\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:436 Remote response: status=200 | data={&amp;quot;value&amp;quot;:{&amp;quot;element-6066-11e4-a52e-4f735466cecf&amp;quot;:&amp;quot;f.1F5E2A99A9DE875E5AD2BA5A7793BD7F.d.4BBB9F88C0959ED3D52B17EA048F5AE5.e.60&amp;quot;}} | headers=HTTPHeaderDict({&amp;#x27;Content-Length&amp;#x27;: &amp;#x27;126&amp;#x27;, &amp;#x27;Content-Type&amp;#x27;: &amp;#x27;application/json; charset=utf-8&amp;#x27;, &amp;#x27;cache-control&amp;#x27;: &amp;#x27;no-cache&amp;#x27;})\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:465 Finished Request\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:403 POST http://localhost:54815/session/9ff285967bdce18e79c3ad7177321d6b/element/f.1F5E2A99A9DE875E5AD2BA5A7793BD7F.d.4BBB9F88C0959ED3D52B17EA048F5AE5.e.60/value {&amp;#x27;text&amp;#x27;: &amp;#x27;abcd@123&amp;#x27;, &amp;#x27;value&amp;#x27;: [&amp;#x27;a&amp;#x27;, &amp;#x27;b&amp;#x27;, &amp;#x27;c&amp;#x27;, &amp;#x27;d&amp;#x27;, &amp;#x27;@&amp;#x27;, &amp;#x27;1&amp;#x27;, &amp;#x27;2&amp;#x27;, &amp;#x27;3&amp;#x27;]}\nDEBUG    urllib3.connectionpool:connectionpool.py:544 http://localhost:54815 &amp;quot;POST /session/9ff285967bdce18e79c3ad7177321d6b/element/f.1F5E2A99A9DE875E5AD2BA5A7793BD7F.d.4BBB9F88C0959ED3D52B17EA048F5AE5.e.60/value HTTP/1.1&amp;quot; 200 0\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:436 Remote response: status=200 | data={&amp;quot;value&amp;quot;:null} | headers=HTTPHeaderDict({&amp;#x27;Content-Length&amp;#x27;: &amp;#x27;14&amp;#x27;, &amp;#x27;Content-Type&amp;#x27;: &amp;#x27;application/json; charset=utf-8&amp;#x27;, &amp;#x27;cache-control&amp;#x27;: &amp;#x27;no-cache&amp;#x27;})\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:465 Finished Request\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:403 POST http://localhost:54815/session/9ff285967bdce18e79c3ad7177321d6b/element {&amp;#x27;using&amp;#x27;: &amp;#x27;xpath&amp;#x27;, &amp;#x27;value&amp;#x27;: &amp;quot;//input[@id=&amp;#x27;input-confirm&amp;#x27;]&amp;quot;}\nDEBUG    urllib3.connectionpool:connectionpool.py:544 http://localhost:54815 &amp;quot;POST /session/9ff285967bdce18e79c3ad7177321d6b/element HTTP/1.1&amp;quot; 200 0\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:436 Remote response: status=200 | data={&amp;quot;value&amp;quot;:{&amp;quot;element-6066-11e4-a52e-4f735466cecf&amp;quot;:&amp;quot;f.1F5E2A99A9DE875E5AD2BA5A7793BD7F.d.4BBB9F88C0959ED3D52B17EA048F5AE5.e.61&amp;quot;}} | headers=HTTPHeaderDict({&amp;#x27;Content-Length&amp;#x27;: &amp;#x27;126&amp;#x27;, &amp;#x27;Content-Type&amp;#x27;: &amp;#x27;application/json; charset=utf-8&amp;#x27;, &amp;#x27;cache-control&amp;#x27;: &amp;#x27;no-cache&amp;#x27;})\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:465 Finished Request\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:403 POST http://localhost:54815/session/9ff285967bdce18e79c3ad7177321d6b/element/f.1F5E2A99A9DE875E5AD2BA5A7793BD7F.d.4BBB9F88C0959ED3D52B17EA048F5AE5.e.61/value {&amp;#x27;text&amp;#x27;: &amp;#x27;abcd@123&amp;#x27;, &amp;#x27;value&amp;#x27;: [&amp;#x27;a&amp;#x27;, &amp;#x27;b&amp;#x27;, &amp;#x27;c&amp;#x27;, &amp;#x27;d&amp;#x27;, &amp;#x27;@&amp;#x27;, &amp;#x27;1&amp;#x27;, &amp;#x27;2&amp;#x27;, &amp;#x27;3&amp;#x27;]}\nDEBUG    urllib3.connectionpool:connectionpool.py:544 http://localhost:54815 &amp;quot;POST /session/9ff285967bdce18e79c3ad7177321d6b/element/f.1F5E2A99A9DE875E5AD2BA5A7793BD7F.d.4BBB9F88C0959ED3D52B17EA048F5AE5.e.61/value HTTP/1.1&amp;quot; 200 0\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:436 Remote response: status=200 | data={&amp;quot;value&amp;quot;:null} | headers=HTTPHeaderDict({&amp;#x27;Content-Length&amp;#x27;: &amp;#x27;14&amp;#x27;, &amp;#x27;Content-Type&amp;#x27;: &amp;#x27;application/json; charset=utf-8&amp;#x27;, &amp;#x27;cache-control&amp;#x27;: &amp;#x27;no-cache&amp;#x27;})\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:465 Finished Request\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:403 POST http://localhost:54815/session/9ff285967bdce18e79c3ad7177321d6b/element {&amp;#x27;using&amp;#x27;: &amp;#x27;xpath&amp;#x27;, &amp;#x27;value&amp;#x27;: &amp;quot;//input[@name=&amp;#x27;agree&amp;#x27;]&amp;quot;}\nDEBUG    urllib3.connectionpool:connectionpool.py:544 http://localhost:54815 &amp;quot;POST /session/9ff285967bdce18e79c3ad7177321d6b/element HTTP/1.1&amp;quot; 200 0\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:436 Remote response: status=200 | data={&amp;quot;value&amp;quot;:{&amp;quot;element-6066-11e4-a52e-4f735466cecf&amp;quot;:&amp;quot;f.1F5E2A99A9DE875E5AD2BA5A7793BD7F.d.4BBB9F88C0959ED3D52B17EA048F5AE5.e.64&amp;quot;}} | headers=HTTPHeaderDict({&amp;#x27;Content-Length&amp;#x27;: &amp;#x27;126&amp;#x27;, &amp;#x27;Content-Type&amp;#x27;: &amp;#x27;application/json; charset=utf-8&amp;#x27;, &amp;#x27;cache-control&amp;#x27;: &amp;#x27;no-cache&amp;#x27;})\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:465 Finished Request\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:403 POST http://localhost:54815/session/9ff285967bdce18e79c3ad7177321d6b/element/f.1F5E2A99A9DE875E5AD2BA5A7793BD7F.d.4BBB9F88C0959ED3D52B17EA048F5AE5.e.64/click {}\nDEBUG    urllib3.connectionpool:connectionpool.py:544 http://localhost:54815 &amp;quot;POST /session/9ff285967bdce18e79c3ad7177321d6b/element/f.1F5E2A99A9DE875E5AD2BA5A7793BD7F.d.4BBB9F88C0959ED3D52B17EA048F5AE5.e.64/click HTTP/1.1&amp;quot; 200 0\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:436 Remote response: status=200 | data={&amp;quot;value&amp;quot;:null} | headers=HTTPHeaderDict({&amp;#x27;Content-Length&amp;#x27;: &amp;#x27;14&amp;#x27;, &amp;#x27;Content-Type&amp;#x27;: &amp;#x27;application/json; charset=utf-8&amp;#x27;, &amp;#x27;cache-control&amp;#x27;: &amp;#x27;no-cache&amp;#x27;})\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:465 Finished Request\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:403 POST http://localhost:54815/session/9ff285967bdce18e79c3ad7177321d6b/element {&amp;#x27;using&amp;#x27;: &amp;#x27;xpath&amp;#x27;, &amp;#x27;value&amp;#x27;: &amp;quot;//input[@value=&amp;#x27;Continue&amp;#x27;]&amp;quot;}\nDEBUG    urllib3.connectionpool:connectionpool.py:544 http://localhost:54815 &amp;quot;POST /session/9ff285967bdce18e79c3ad7177321d6b/element HTTP/1.1&amp;quot; 200 0\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:436 Remote response: status=200 | data={&amp;quot;value&amp;quot;:{&amp;quot;element-6066-11e4-a52e-4f735466cecf&amp;quot;:&amp;quot;f.1F5E2A99A9DE875E5AD2BA5A7793BD7F.d.4BBB9F88C0959ED3D52B17EA048F5AE5.e.76&amp;quot;}} | headers=HTTPHeaderDict({&amp;#x27;Content-Length&amp;#x27;: &amp;#x27;126&amp;#x27;, &amp;#x27;Content-Type&amp;#x27;: &amp;#x27;application/json; charset=utf-8&amp;#x27;, &amp;#x27;cache-control&amp;#x27;: &amp;#x27;no-cache&amp;#x27;})\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:465 Finished Request\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:403 POST http://localhost:54815/session/9ff285967bdce18e79c3ad7177321d6b/element/f.1F5E2A99A9DE875E5AD2BA5A7793BD7F.d.4BBB9F88C0959ED3D52B17EA048F5AE5.e.76/click {}\nDEBUG    urllib3.connectionpool:connectionpool.py:544 http://localhost:54815 &amp;quot;POST /session/9ff285967bdce18e79c3ad7177321d6b/element/f.1F5E2A99A9DE875E5AD2BA5A7793BD7F.d.4BBB9F88C0959ED3D52B17EA048F5AE5.e.76/click HTTP/1.1&amp;quot; 200 0\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:436 Remote response: status=200 | data={&amp;quot;value&amp;quot;:null} | headers=HTTPHeaderDict({&amp;#x27;Content-Length&amp;#x27;: &amp;#x27;14&amp;#x27;, &amp;#x27;Content-Type&amp;#x27;: &amp;#x27;application/json; charset=utf-8&amp;#x27;, &amp;#x27;cache-control&amp;#x27;: &amp;#x27;no-cache&amp;#x27;})\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:465 Finished Request\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:403 POST http://localhost:54815/session/9ff285967bdce18e79c3ad7177321d6b/element {&amp;#x27;using&amp;#x27;: &amp;#x27;xpath&amp;#x27;, &amp;#x27;value&amp;#x27;: &amp;quot;//h1[normalize-space()=&amp;#x27;Your Account Has Been Created!&amp;#x27;]&amp;quot;}\nDEBUG    urllib3.connectionpool:connectionpool.py:544 http://localhost:54815 &amp;quot;POST /session/9ff285967bdce18e79c3ad7177321d6b/element HTTP/1.1&amp;quot; 200 0\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:436 Remote response: status=200 | data={&amp;quot;value&amp;quot;:{&amp;quot;element-6066-11e4-a52e-4f735466cecf&amp;quot;:&amp;quot;f.1F5E2A99A9DE875E5AD2BA5A7793BD7F.d.E16598A23086A2A70D574B8502ED4EEB.e.95&amp;quot;}} | headers=HTTPHeaderDict({&amp;#x27;Content-Length&amp;#x27;: &amp;#x27;126&amp;#x27;, &amp;#x27;Content-Type&amp;#x27;: &amp;#x27;application/json; charset=utf-8&amp;#x27;, &amp;#x27;cache-control&amp;#x27;: &amp;#x27;no-cache&amp;#x27;})\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:465 Finished Request\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:403 GET http://localhost:54815/session/9ff285967bdce18e79c3ad7177321d6b/element/f.1F5E2A99A9DE875E5AD2BA5A7793BD7F.d.E16598A23086A2A70D574B8502ED4EEB.e.95/text {}\nDEBUG    urllib3.connectionpool:connectionpool.py:544 http://localhost:54815 &amp;quot;GET /session/9ff285967bdce18e79c3ad7177321d6b/element/f.1F5E2A99A9DE875E5AD2BA5A7793BD7F.d.E16598A23086A2A70D574B8502ED4EEB.e.95/text HTTP/1.1&amp;quot; 200 0\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:436 Remote response: status=200 | data={&amp;quot;value&amp;quot;:&amp;quot;Your Account Has Been Created!&amp;quot;} | headers=HTTPHeaderDict({&amp;#x27;Content-Length&amp;#x27;: &amp;#x27;42&amp;#x27;, &amp;#x27;Content-Type&amp;#x27;: &amp;#x27;application/json; charset=utf-8&amp;#x27;, &amp;#x27;cache-control&amp;#x27;: &amp;#x27;no-cache&amp;#x27;})\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:465 Finished Request\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:403 POST http://localhost:54815/session/9ff285967bdce18e79c3ad7177321d6b/element {&amp;#x27;using&amp;#x27;: &amp;#x27;xpath&amp;#x27;, &amp;#x27;value&amp;#x27;: &amp;quot;//a[@class=&amp;#x27;btn btn-primary&amp;#x27;]&amp;quot;}\nDEBUG    urllib3.connectionpool:connectionpool.py:544 http://localhost:54815 &amp;quot;POST /session/9ff285967bdce18e79c3ad7177321d6b/element HTTP/1.1&amp;quot; 200 0\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:436 Remote response: status=200 | data={&amp;quot;value&amp;quot;:{&amp;quot;element-6066-11e4-a52e-4f735466cecf&amp;quot;:&amp;quot;f.1F5E2A99A9DE875E5AD2BA5A7793BD7F.d.E16598A23086A2A70D574B8502ED4EEB.e.96&amp;quot;}} | headers=HTTPHeaderDict({&amp;#x27;Content-Length&amp;#x27;: &amp;#x27;126&amp;#x27;, &amp;#x27;Content-Type&amp;#x27;: &amp;#x27;application/json; charset=utf-8&amp;#x27;, &amp;#x27;cache-control&amp;#x27;: &amp;#x27;no-cache&amp;#x27;})\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:465 Finished Request\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:403 POST http://localhost:54815/session/9ff285967bdce18e79c3ad7177321d6b/execute/sync {&amp;#x27;script&amp;#x27;: &amp;#x27;/* isDisplayed */return (function(){return (function(){var g=this||self;\\nfunction aa(a){var b=typeof...&amp;#x27;, &amp;#x27;args&amp;#x27;: [{&amp;#x27;element-6066-11e4-a52e-4f735466cecf&amp;#x27;: &amp;#x27;f.1F5E2A99A9DE875E5AD2BA5A7793BD7F.d.E16598A23086A2A70D574B8502ED4EEB.e.96&amp;#x27;}]}\nDEBUG    urllib3.connectionpool:connectionpool.py:544 http://localhost:54815 &amp;quot;POST /session/9ff285967bdce18e79c3ad7177321d6b/execute/sync HTTP/1.1&amp;quot; 200 0\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:436 Remote response: status=200 | data={&amp;quot;value&amp;quot;:true} | headers=HTTPHeaderDict({&amp;#x27;Content-Length&amp;#x27;: &amp;#x27;14&amp;#x27;, &amp;#x27;Content-Type&amp;#x27;: &amp;#x27;application/json; charset=utf-8&amp;#x27;, &amp;#x27;cache-control&amp;#x27;: &amp;#x27;no-cache&amp;#x27;})\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:465 Finished Request\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:403 GET http://localhost:54815/session/9ff285967bdce18e79c3ad7177321d6b/element/f.1F5E2A99A9DE875E5AD2BA5A7793BD7F.d.E16598A23086A2A70D574B8502ED4EEB.e.96/enabled {}\nDEBUG    urllib3.connectionpool:connectionpool.py:544 http://localhost:54815 &amp;quot;GET /session/9ff285967bdce18e79c3ad7177321d6b/element/f.1F5E2A99A9DE875E5AD2BA5A7793BD7F.d.E16598A23086A2A70D574B8502ED4EEB.e.96/enabled HTTP/1.1&amp;quot; 200 0\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:436 Remote response: status=200 | data={&amp;quot;value&amp;quot;:true} | headers=HTTPHeaderDict({&amp;#x27;Content-Length&amp;#x27;: &amp;#x27;14&amp;#x27;, &amp;#x27;Content-Type&amp;#x27;: &amp;#x27;application/json; charset=utf-8&amp;#x27;, &amp;#x27;cache-control&amp;#x27;: &amp;#x27;no-cache&amp;#x27;})\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:465 Finished Request\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:403 POST http://localhost:54815/session/9ff285967bdce18e79c3ad7177321d6b/element/f.1F5E2A99A9DE875E5AD2BA5A7793BD7F.d.E16598A23086A2A70D574B8502ED4EEB.e.96/click {}\nDEBUG    urllib3.connectionpool:connectionpool.py:544 http://localhost:54815 &amp;quot;POST /session/9ff285967bdce18e79c3ad7177321d6b/element/f.1F5E2A99A9DE875E5AD2BA5A7793BD7F.d.E16598A23086A2A70D574B8502ED4EEB.e.96/click HTTP/1.1&amp;quot; 200 0\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:436 Remote response: status=200 | data={&amp;quot;value&amp;quot;:null} | headers=HTTPHeaderDict({&amp;#x27;Content-Length&amp;#x27;: &amp;#x27;14&amp;#x27;, &amp;#x27;Content-Type&amp;#x27;: &amp;#x27;application/json; charset=utf-8&amp;#x27;, &amp;#x27;cache-control&amp;#x27;: &amp;#x27;no-cache&amp;#x27;})\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:465 Finished Request\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:403 POST http://localhost:54815/session/9ff285967bdce18e79c3ad7177321d6b/element {&amp;#x27;using&amp;#x27;: &amp;#x27;xpath&amp;#x27;, &amp;#x27;value&amp;#x27;: &amp;quot;//h2[normalize-space()=&amp;#x27;My Account&amp;#x27;]&amp;quot;}\nDEBUG    urllib3.connectionpool:connectionpool.py:544 http://localhost:54815 &amp;quot;POST /session/9ff285967bdce18e79c3ad7177321d6b/element HTTP/1.1&amp;quot; 200 0\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:436 Remote response: status=200 | data={&amp;quot;value&amp;quot;:{&amp;quot;element-6066-11e4-a52e-4f735466cecf&amp;quot;:&amp;quot;f.1F5E2A99A9DE875E5AD2BA5A7793BD7F.d.777AF82CE8417C7B5594DB816A21EF16.e.104&amp;quot;}} | headers=HTTPHeaderDict({&amp;#x27;Content-Length&amp;#x27;: &amp;#x27;127&amp;#x27;, &amp;#x27;Content-Type&amp;#x27;: &amp;#x27;application/json; charset=utf-8&amp;#x27;, &amp;#x27;cache-control&amp;#x27;: &amp;#x27;no-cache&amp;#x27;})\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:465 Finished Request\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:403 GET http://localhost:54815/session/9ff285967bdce18e79c3ad7177321d6b/element/f.1F5E2A99A9DE875E5AD2BA5A7793BD7F.d.777AF82CE8417C7B5594DB816A21EF16.e.104/text {}\nDEBUG    urllib3.connectionpool:connectionpool.py:544 http://localhost:54815 &amp;quot;GET /session/9ff285967bdce18e79c3ad7177321d6b/element/f.1F5E2A99A9DE875E5AD2BA5A7793BD7F.d.777AF82CE8417C7B5594DB816A21EF16.e.104/text HTTP/1.1&amp;quot; 200 0\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:436 Remote response: status=200 | data={&amp;quot;value&amp;quot;:&amp;quot;My Account&amp;quot;} | headers=HTTPHeaderDict({&amp;#x27;Content-Length&amp;#x27;: &amp;#x27;22&amp;#x27;, &amp;#x27;Content-Type&amp;#x27;: &amp;#x27;application/json; charset=utf-8&amp;#x27;, &amp;#x27;cache-control&amp;#x27;: &amp;#x27;no-cache&amp;#x27;})\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:465 Finished Request\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:403 GET http://localhost:54815/session/9ff285967bdce18e79c3ad7177321d6b/screenshot {}\nDEBUG    urllib3.connectionpool:connectionpool.py:544 http://localhost:54815 &amp;quot;GET /session/9ff285967bdce18e79c3ad7177321d6b/screenshot HTTP/1.1&amp;quot; 200 0\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:436 Remote response: status=200 | data={&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;} | headers=HTTPHeaderDict({&amp;#x27;Content-Length&amp;#x27;: &amp;#x27;183476&amp;#x27;, &amp;#x27;Content-Type&amp;#x27;: &amp;#x27;application/json; charset=utf-8&amp;#x27;, &amp;#x27;cache-control&amp;#x27;: &amp;#x27;no-cache&amp;#x27;})\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:465 Finished Request\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:403 DELETE http://localhost:54815/session/9ff285967bdce18e79c3ad7177321d6b {}\nDEBUG    urllib3.connectionpool:connectionpool.py:544 http://localhost:54815 &amp;quot;DELETE /session/9ff285967bdce18e79c3ad7177321d6b HTTP/1.1&amp;quot; 200 0\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:436 Remote response: status=200 | data={&amp;quot;value&amp;quot;:null} | headers=HTTPHeaderDict({&amp;#x27;Content-Length&amp;#x27;: &amp;#x27;14&amp;#x27;, &amp;#x27;Content-Type&amp;#x27;: &amp;#x27;application/json; charset=utf-8&amp;#x27;, &amp;#x27;cache-control&amp;#x27;: &amp;#x27;no-cache&amp;#x27;})\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:465 Finished Request\n\n---------------------------- Captured log teardown -----------------------------\nDEBUG    selenium.webdriver.remote.remote_connection:remote_connection.py:403 DELETE http://localhost:54815/session/9ff285967bdce18e79c3ad7177321d6b {}\nDEBUG    urllib3.connectionpool:connectionpool.py:241 Starting new HTTP connection (1): localhost:54815\nDEBUG    urllib3.util.retry:retry.py:521 Incremented Retry for (url=&amp;#x27;/session/9ff285967bdce18e79c3ad7177321d6b&amp;#x27;): Retry(total=2, connect=None, read=None, redirect=None, status=None)\nWARNING  urllib3.connectionpool:connectionpool.py:868 Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by &amp;#x27;NewConnectionError(&amp;#x27;&amp;lt;urllib3.connection.HTTPConnection object at 0x0000013965249760&amp;gt;: Failed to establish a new connection: [WinError 10061] No connection could be made because the target machine actively refused it&amp;#x27;)&amp;#x27;: /session/9ff285967bdce18e79c3ad7177321d6b\nDEBUG    urllib3.connectionpool:connectionpool.py:241 Starting new HTTP connection (2): localhost:54815\nDEBUG    urllib3.util.retry:retry.py:521 Incremented Retry for (url=&amp;#x27;/session/9ff285967bdce18e79c3ad7177321d6b&amp;#x27;): Retry(total=1, connect=None, read=None, redirect=None, status=None)\nWARNING  urllib3.connectionpool:connectionpool.py:868 Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by &amp;#x27;NewConnectionError(&amp;#x27;&amp;lt;urllib3.connection.HTTPConnection object at 0x0000013965249BB0&amp;gt;: Failed to establish a new connection: [WinError 10061] No connection could be made because the target machine actively refused it&amp;#x27;)&amp;#x27;: /session/9ff285967bdce18e79c3ad7177321d6b\nDEBUG    urllib3.connectionpool:connectionpool.py:241 Starting new HTTP connection (3): localhost:54815\nDEBUG    urllib3.util.retry:retry.py:521 Incremented Retry for (url=&amp;#x27;/session/9ff285967bdce18e79c3ad7177321d6b&amp;#x27;): Retry(total=0, connect=None, read=None, redirect=None, status=None)\nWARNING  urllib3.connectionpool:connectionpool.py:868 Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by &amp;#x27;NewConnectionError(&amp;#x27;&amp;lt;urllib3.connection.HTTPConnection object at 0x0000013965249DF0&amp;gt;: Failed to establish a new connection: [WinError 10061] No connection could be made because the target machine actively refused it&amp;#x27;)&amp;#x27;: /session/9ff285967bdce18e79c3ad7177321d6b\nDEBUG    urllib3.connectionpool:connectionpool.py:241 Starting new HTTP connection (4): localhost:54815&#34;}]}, &#34;renderCollapsed&#34;: [&#34;passed&#34;], &#34;initialSort&#34;: &#34;result&#34;, &#34;title&#34;: &#34;test_reg_succ_continue1&#34;}"></div>
    <script>
      (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
const { getCollapsedCategory, setCollapsedIds } = require('./storage.js')

class DataManager {
    setManager(data) {
        const collapsedCategories = [...getCollapsedCategory(data.renderCollapsed)]
        const collapsedIds = []
        const tests = Object.values(data.tests).flat().map((test, index) => {
            const collapsed = collapsedCategories.includes(test.result.toLowerCase())
            const id = `test_${index}`
            if (collapsed) {
                collapsedIds.push(id)
            }
            return {
                ...test,
                id,
                collapsed,
            }
        })
        const dataBlob = { ...data, tests }
        this.data = { ...dataBlob }
        this.renderData = { ...dataBlob }
        setCollapsedIds(collapsedIds)
    }

    get allData() {
        return { ...this.data }
    }

    resetRender() {
        this.renderData = { ...this.data }
    }

    setRender(data) {
        this.renderData.tests = [...data]
    }

    toggleCollapsedItem(id) {
        this.renderData.tests = this.renderData.tests.map((test) =>
            test.id === id ? { ...test, collapsed: !test.collapsed } : test,
        )
    }

    set allCollapsed(collapsed) {
        this.renderData = { ...this.renderData, tests: [...this.renderData.tests.map((test) => (
            { ...test, collapsed }
        ))] }
    }

    get testSubset() {
        return [...this.renderData.tests]
    }

    get environment() {
        return this.renderData.environment
    }

    get initialSort() {
        return this.data.initialSort
    }
}

module.exports = {
    manager: new DataManager(),
}

},{"./storage.js":8}],2:[function(require,module,exports){
const mediaViewer = require('./mediaviewer.js')
const templateEnvRow = document.getElementById('template_environment_row')
const templateResult = document.getElementById('template_results-table__tbody')

function htmlToElements(html) {
    const temp = document.createElement('template')
    temp.innerHTML = html
    return temp.content.childNodes
}

const find = (selector, elem) => {
    if (!elem) {
        elem = document
    }
    return elem.querySelector(selector)
}

const findAll = (selector, elem) => {
    if (!elem) {
        elem = document
    }
    return [...elem.querySelectorAll(selector)]
}

const dom = {
    getStaticRow: (key, value) => {
        const envRow = templateEnvRow.content.cloneNode(true)
        const isObj = typeof value === 'object' && value !== null
        const values = isObj ? Object.keys(value).map((k) => `${k}: ${value[k]}`) : null

        const valuesElement = htmlToElements(
            values ? `<ul>${values.map((val) => `<li>${val}</li>`).join('')}<ul>` : `<div>${value}</div>`)[0]
        const td = findAll('td', envRow)
        td[0].textContent = key
        td[1].appendChild(valuesElement)

        return envRow
    },
    getResultTBody: ({ testId, id, log, extras, resultsTableRow, tableHtml, result, collapsed }) => {
        const resultBody = templateResult.content.cloneNode(true)
        resultBody.querySelector('tbody').classList.add(result.toLowerCase())
        resultBody.querySelector('tbody').id = testId
        resultBody.querySelector('.collapsible').dataset.id = id

        resultsTableRow.forEach((html) => {
            const t = document.createElement('template')
            t.innerHTML = html
            resultBody.querySelector('.collapsible').appendChild(t.content)
        })

        if (log) {
            // Wrap lines starting with "E" with span.error to color those lines red
            const wrappedLog = log.replace(/^E.*$/gm, (match) => `<span class="error">${match}</span>`)
            resultBody.querySelector('.log').innerHTML = wrappedLog
        } else {
            resultBody.querySelector('.log').remove()
        }

        if (collapsed) {
            resultBody.querySelector('.collapsible > td')?.classList.add('collapsed')
            resultBody.querySelector('.extras-row').classList.add('hidden')
        } else {
            resultBody.querySelector('.collapsible > td')?.classList.remove('collapsed')
        }

        const media = []
        extras?.forEach(({ name, format_type, content }) => {
            if (['image', 'video'].includes(format_type)) {
                media.push({ path: content, name, format_type })
            }

            if (format_type === 'html') {
                resultBody.querySelector('.extraHTML').insertAdjacentHTML('beforeend', `<div>${content}</div>`)
            }
        })
        mediaViewer.setup(resultBody, media)

        // Add custom html from the pytest_html_results_table_html hook
        tableHtml?.forEach((item) => {
            resultBody.querySelector('td[class="extra"]').insertAdjacentHTML('beforeend', item)
        })

        return resultBody
    },
}

module.exports = {
    dom,
    htmlToElements,
    find,
    findAll,
}

},{"./mediaviewer.js":6}],3:[function(require,module,exports){
const { manager } = require('./datamanager.js')
const { doSort } = require('./sort.js')
const storageModule = require('./storage.js')

const getFilteredSubSet = (filter) =>
    manager.allData.tests.filter(({ result }) => filter.includes(result.toLowerCase()))

const doInitFilter = () => {
    const currentFilter = storageModule.getVisible()
    const filteredSubset = getFilteredSubSet(currentFilter)
    manager.setRender(filteredSubset)
}

const doFilter = (type, show) => {
    if (show) {
        storageModule.showCategory(type)
    } else {
        storageModule.hideCategory(type)
    }

    const currentFilter = storageModule.getVisible()
    const filteredSubset = getFilteredSubSet(currentFilter)
    manager.setRender(filteredSubset)

    const sortColumn = storageModule.getSort()
    doSort(sortColumn, true)
}

module.exports = {
    doFilter,
    doInitFilter,
}

},{"./datamanager.js":1,"./sort.js":7,"./storage.js":8}],4:[function(require,module,exports){
const { redraw, bindEvents, renderStatic } = require('./main.js')
const { doInitFilter } = require('./filter.js')
const { doInitSort } = require('./sort.js')
const { manager } = require('./datamanager.js')
const data = JSON.parse(document.getElementById('data-container').dataset.jsonblob)

function init() {
    manager.setManager(data)
    doInitFilter()
    doInitSort()
    renderStatic()
    redraw()
    bindEvents()
}

init()

},{"./datamanager.js":1,"./filter.js":3,"./main.js":5,"./sort.js":7}],5:[function(require,module,exports){
const { dom, find, findAll } = require('./dom.js')
const { manager } = require('./datamanager.js')
const { doSort } = require('./sort.js')
const { doFilter } = require('./filter.js')
const {
    getVisible,
    getCollapsedIds,
    setCollapsedIds,
    getSort,
    getSortDirection,
    possibleFilters,
} = require('./storage.js')

const removeChildren = (node) => {
    while (node.firstChild) {
        node.removeChild(node.firstChild)
    }
}

const renderStatic = () => {
    const renderEnvironmentTable = () => {
        const environment = manager.environment
        const rows = Object.keys(environment).map((key) => dom.getStaticRow(key, environment[key]))
        const table = document.getElementById('environment')
        removeChildren(table)
        rows.forEach((row) => table.appendChild(row))
    }
    renderEnvironmentTable()
}

const addItemToggleListener = (elem) => {
    elem.addEventListener('click', ({ target }) => {
        const id = target.parentElement.dataset.id
        manager.toggleCollapsedItem(id)

        const collapsedIds = getCollapsedIds()
        if (collapsedIds.includes(id)) {
            const updated = collapsedIds.filter((item) => item !== id)
            setCollapsedIds(updated)
        } else {
            collapsedIds.push(id)
            setCollapsedIds(collapsedIds)
        }
        redraw()
    })
}

const renderContent = (tests) => {
    const sortAttr = getSort(manager.initialSort)
    const sortAsc = JSON.parse(getSortDirection())
    const rows = tests.map(dom.getResultTBody)
    const table = document.getElementById('results-table')
    const tableHeader = document.getElementById('results-table-head')

    const newTable = document.createElement('table')
    newTable.id = 'results-table'

    // remove all sorting classes and set the relevant
    findAll('.sortable', tableHeader).forEach((elem) => elem.classList.remove('asc', 'desc'))
    tableHeader.querySelector(`.sortable[data-column-type="${sortAttr}"]`)?.classList.add(sortAsc ? 'desc' : 'asc')
    newTable.appendChild(tableHeader)

    if (!rows.length) {
        const emptyTable = document.getElementById('template_results-table__body--empty').content.cloneNode(true)
        newTable.appendChild(emptyTable)
    } else {
        rows.forEach((row) => {
            if (!!row) {
                findAll('.collapsible td:not(.col-links', row).forEach(addItemToggleListener)
                find('.logexpander', row).addEventListener('click',
                    (evt) => evt.target.parentNode.classList.toggle('expanded'),
                )
                newTable.appendChild(row)
            }
        })
    }

    table.replaceWith(newTable)
}

const renderDerived = () => {
    const currentFilter = getVisible()
    possibleFilters.forEach((result) => {
        const input = document.querySelector(`input[data-test-result="${result}"]`)
        input.checked = currentFilter.includes(result)
    })
}

const bindEvents = () => {
    const filterColumn = (evt) => {
        const { target: element } = evt
        const { testResult } = element.dataset

        doFilter(testResult, element.checked)
        const collapsedIds = getCollapsedIds()
        const updated = manager.renderData.tests.map((test) => {
            return {
                ...test,
                collapsed: collapsedIds.includes(test.id),
            }
        })
        manager.setRender(updated)
        redraw()
    }

    const header = document.getElementById('environment-header')
    header.addEventListener('click', () => {
        const table = document.getElementById('environment')
        table.classList.toggle('hidden')
        header.classList.toggle('collapsed')
    })

    findAll('input[name="filter_checkbox"]').forEach((elem) => {
        elem.addEventListener('click', filterColumn)
    })

    findAll('.sortable').forEach((elem) => {
        elem.addEventListener('click', (evt) => {
            const { target: element } = evt
            const { columnType } = element.dataset
            doSort(columnType)
            redraw()
        })
    })

    document.getElementById('show_all_details').addEventListener('click', () => {
        manager.allCollapsed = false
        setCollapsedIds([])
        redraw()
    })
    document.getElementById('hide_all_details').addEventListener('click', () => {
        manager.allCollapsed = true
        const allIds = manager.renderData.tests.map((test) => test.id)
        setCollapsedIds(allIds)
        redraw()
    })
}

const redraw = () => {
    const { testSubset } = manager

    renderContent(testSubset)
    renderDerived()
}

module.exports = {
    redraw,
    bindEvents,
    renderStatic,
}

},{"./datamanager.js":1,"./dom.js":2,"./filter.js":3,"./sort.js":7,"./storage.js":8}],6:[function(require,module,exports){
class MediaViewer {
    constructor(assets) {
        this.assets = assets
        this.index = 0
    }

    nextActive() {
        this.index = this.index === this.assets.length - 1 ? 0 : this.index + 1
        return [this.activeFile, this.index]
    }

    prevActive() {
        this.index = this.index === 0 ? this.assets.length - 1 : this.index -1
        return [this.activeFile, this.index]
    }

    get currentIndex() {
        return this.index
    }

    get activeFile() {
        return this.assets[this.index]
    }
}


const setup = (resultBody, assets) => {
    if (!assets.length) {
        resultBody.querySelector('.media').classList.add('hidden')
        return
    }

    const mediaViewer = new MediaViewer(assets)
    const container = resultBody.querySelector('.media-container')
    const leftArrow = resultBody.querySelector('.media-container__nav--left')
    const rightArrow = resultBody.querySelector('.media-container__nav--right')
    const mediaName = resultBody.querySelector('.media__name')
    const counter = resultBody.querySelector('.media__counter')
    const imageEl = resultBody.querySelector('img')
    const sourceEl = resultBody.querySelector('source')
    const videoEl = resultBody.querySelector('video')

    const setImg = (media, index) => {
        if (media?.format_type === 'image') {
            imageEl.src = media.path

            imageEl.classList.remove('hidden')
            videoEl.classList.add('hidden')
        } else if (media?.format_type === 'video') {
            sourceEl.src = media.path

            videoEl.classList.remove('hidden')
            imageEl.classList.add('hidden')
        }

        mediaName.innerText = media?.name
        counter.innerText = `${index + 1} / ${assets.length}`
    }
    setImg(mediaViewer.activeFile, mediaViewer.currentIndex)

    const moveLeft = () => {
        const [media, index] = mediaViewer.prevActive()
        setImg(media, index)
    }
    const doRight = () => {
        const [media, index] = mediaViewer.nextActive()
        setImg(media, index)
    }
    const openImg = () => {
        window.open(mediaViewer.activeFile.path, '_blank')
    }
    if (assets.length === 1) {
        container.classList.add('media-container--fullscreen')
    } else {
        leftArrow.addEventListener('click', moveLeft)
        rightArrow.addEventListener('click', doRight)
    }
    imageEl.addEventListener('click', openImg)
}

module.exports = {
    setup,
}

},{}],7:[function(require,module,exports){
const { manager } = require('./datamanager.js')
const storageModule = require('./storage.js')

const genericSort = (list, key, ascending, customOrder) => {
    let sorted
    if (customOrder) {
        sorted = list.sort((a, b) => {
            const aValue = a.result.toLowerCase()
            const bValue = b.result.toLowerCase()

            const aIndex = customOrder.findIndex((item) => item.toLowerCase() === aValue)
            const bIndex = customOrder.findIndex((item) => item.toLowerCase() === bValue)

            // Compare the indices to determine the sort order
            return aIndex - bIndex
        })
    } else {
        sorted = list.sort((a, b) => a[key] === b[key] ? 0 : a[key] > b[key] ? 1 : -1)
    }

    if (ascending) {
        sorted.reverse()
    }
    return sorted
}

const durationSort = (list, ascending) => {
    const parseDuration = (duration) => {
        if (duration.includes(':')) {
            // If it's in the format "HH:mm:ss"
            const [hours, minutes, seconds] = duration.split(':').map(Number)
            return (hours * 3600 + minutes * 60 + seconds) * 1000
        } else {
            // If it's in the format "nnn ms"
            return parseInt(duration)
        }
    }
    const sorted = list.sort((a, b) => parseDuration(a['duration']) - parseDuration(b['duration']))
    if (ascending) {
        sorted.reverse()
    }
    return sorted
}

const doInitSort = () => {
    const type = storageModule.getSort(manager.initialSort)
    const ascending = storageModule.getSortDirection()
    const list = manager.testSubset
    const initialOrder = ['Error', 'Failed', 'Rerun', 'XFailed', 'XPassed', 'Skipped', 'Passed']

    storageModule.setSort(type)
    storageModule.setSortDirection(ascending)

    if (type?.toLowerCase() === 'original') {
        manager.setRender(list)
    } else {
        let sortedList
        switch (type) {
        case 'duration':
            sortedList = durationSort(list, ascending)
            break
        case 'result':
            sortedList = genericSort(list, type, ascending, initialOrder)
            break
        default:
            sortedList = genericSort(list, type, ascending)
            break
        }
        manager.setRender(sortedList)
    }
}

const doSort = (type, skipDirection) => {
    const newSortType = storageModule.getSort(manager.initialSort) !== type
    const currentAsc = storageModule.getSortDirection()
    let ascending
    if (skipDirection) {
        ascending = currentAsc
    } else {
        ascending = newSortType ? false : !currentAsc
    }
    storageModule.setSort(type)
    storageModule.setSortDirection(ascending)

    const list = manager.testSubset
    const sortedList = type === 'duration' ? durationSort(list, ascending) : genericSort(list, type, ascending)
    manager.setRender(sortedList)
}

module.exports = {
    doInitSort,
    doSort,
}

},{"./datamanager.js":1,"./storage.js":8}],8:[function(require,module,exports){
const possibleFilters = [
    'passed',
    'skipped',
    'failed',
    'error',
    'xfailed',
    'xpassed',
    'rerun',
]

const getVisible = () => {
    const url = new URL(window.location.href)
    const settings = new URLSearchParams(url.search).get('visible')
    const lower = (item) => {
        const lowerItem = item.toLowerCase()
        if (possibleFilters.includes(lowerItem)) {
            return lowerItem
        }
        return null
    }
    return settings === null ?
        possibleFilters :
        [...new Set(settings?.split(',').map(lower).filter((item) => item))]
}

const hideCategory = (categoryToHide) => {
    const url = new URL(window.location.href)
    const visibleParams = new URLSearchParams(url.search).get('visible')
    const currentVisible = visibleParams ? visibleParams.split(',') : [...possibleFilters]
    const settings = [...new Set(currentVisible)].filter((f) => f !== categoryToHide).join(',')

    url.searchParams.set('visible', settings)
    window.history.pushState({}, null, unescape(url.href))
}

const showCategory = (categoryToShow) => {
    if (typeof window === 'undefined') {
        return
    }
    const url = new URL(window.location.href)
    const currentVisible = new URLSearchParams(url.search).get('visible')?.split(',').filter(Boolean) ||
        [...possibleFilters]
    const settings = [...new Set([categoryToShow, ...currentVisible])]
    const noFilter = possibleFilters.length === settings.length || !settings.length

    noFilter ? url.searchParams.delete('visible') : url.searchParams.set('visible', settings.join(','))
    window.history.pushState({}, null, unescape(url.href))
}

const getSort = (initialSort) => {
    const url = new URL(window.location.href)
    let sort = new URLSearchParams(url.search).get('sort')
    if (!sort) {
        sort = initialSort || 'result'
    }
    return sort
}

const setSort = (type) => {
    const url = new URL(window.location.href)
    url.searchParams.set('sort', type)
    window.history.pushState({}, null, unescape(url.href))
}

const getCollapsedCategory = (renderCollapsed) => {
    let categories
    if (typeof window !== 'undefined') {
        const url = new URL(window.location.href)
        const collapsedItems = new URLSearchParams(url.search).get('collapsed')
        switch (true) {
        case !renderCollapsed && collapsedItems === null:
            categories = ['passed']
            break
        case collapsedItems?.length === 0 || /^["']{2}$/.test(collapsedItems):
            categories = []
            break
        case /^all$/.test(collapsedItems) || collapsedItems === null && /^all$/.test(renderCollapsed):
            categories = [...possibleFilters]
            break
        default:
            categories = collapsedItems?.split(',').map((item) => item.toLowerCase()) || renderCollapsed
            break
        }
    } else {
        categories = []
    }
    return categories
}

const getSortDirection = () => JSON.parse(sessionStorage.getItem('sortAsc')) || false
const setSortDirection = (ascending) => sessionStorage.setItem('sortAsc', ascending)

const getCollapsedIds = () => JSON.parse(sessionStorage.getItem('collapsedIds')) || []
const setCollapsedIds = (list) => sessionStorage.setItem('collapsedIds', JSON.stringify(list))

module.exports = {
    getVisible,
    hideCategory,
    showCategory,
    getCollapsedIds,
    setCollapsedIds,
    getSort,
    setSort,
    getSortDirection,
    setSortDirection,
    getCollapsedCategory,
    possibleFilters,
}

},{}]},{},[4]);
    </script>
  </footer>
</html>