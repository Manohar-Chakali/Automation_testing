{"name": "test_TC_LG_003", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\nStacktrace:\n\tGetHandleVerifier [0x00920B43+25139]\n\t(No symbol) [0x008B13F4]\n\t(No symbol) [0x00790340]\n\t(No symbol) [0x007CB278]\n\t(No symbol) [0x007FCE86]\n\t(No symbol) [0x007F8861]\n\t(No symbol) [0x007F7DE6]\n\t(No symbol) [0x00763245]\n\t(No symbol) [0x0076379E]\n\t(No symbol) [0x00763C1D]\n\tGetHandleVerifier [0x00C24373+3185251]\n\tGetHandleVerifier [0x00C4291A+3309578]\n\tGetHandleVerifier [0x00C3CF42+3286578]\n\tGetHandleVerifier [0x009B7AE0+643536]\n\t(No symbol) [0x008BA20D]\n\t(No symbol) [0x00762F10]\n\t(No symbol) [0x00762AD6]\n\tGetHandleVerifier [0x00CC717C+3852396]\n\tBaseThreadInitThunk [0x75CC5D49+25]\n\tRtlInitializeExceptionChain [0x774FCDEB+107]\n\tRtlGetAppContainerNamedObjectPath [0x774FCD71+561]", "trace": "self = <user_session_with_browser_quitting.Test_TC_LG_003 object at 0x000001CF267261B0>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"d86c0072dad070ced0c95e1f8c703b26\")>\n\n    def test_TC_LG_003(self, setup):\n        self.driver = setup\n        self.driver.get(self.baseurl)\n        self.driver.maximize_window()\n        self.logger.info(\"Application Started..........\")\n    \n        try:\n            # Step 1: Perform Login\n            self.hp = Homepage(self.driver)\n            self.hp.clickmyaccount()\n            self.hp.clicklogin()\n    \n            self.lp = Login(self.driver)\n            self.lp.click_email(Read_Commondata.get_useremail())\n            self.lp.click_password(Read_Commondata.get_userpassword())\n            self.lp.click_login()\n    \n            # Step 2: Validate Login Success\n            self.myacc = self.lp.myaccount_page()\n    \n            if self.myacc.strip().lower() == \"valid\":\n                self.logger.info(\"User logged in successfully\")\n                allure.attach(self.driver.get_screenshot_as_png(), name=\"After Login\", attachment_type=AttachmentType.PNG)\n    \n                # Step 3: Capture Cookies for Session Persistence\n                cookies = self.driver.get_cookies()\n                self.driver.close()\n    \n                # Step 4: Reopen the Browser and Restore Cookies\n                self.driver = setup\n>               self.driver.get(self.baseurl)\n\ntestCases\\Logout Test Cases\\user_session_with_browser_quitting.py:49: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:393: in get\n    self.execute(Command.GET, {\"url\": url})\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001CF27540C50>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"invalid session id\",\"stacktrace\":\"\\\\tGetHa...9+25]\\\\n\\\\tRtlInitializeExceptionChain [0x774FCDEB+107]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x774FCD71+561]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00920B43+25139]\nE       \t(No symbol) [0x008B13F4]\nE       \t(No symbol) [0x00790340]\nE       \t(No symbol) [0x007CB278]\nE       \t(No symbol) [0x007FCE86]\nE       \t(No symbol) [0x007F8861]\nE       \t(No symbol) [0x007F7DE6]\nE       \t(No symbol) [0x00763245]\nE       \t(No symbol) [0x0076379E]\nE       \t(No symbol) [0x00763C1D]\nE       \tGetHandleVerifier [0x00C24373+3185251]\nE       \tGetHandleVerifier [0x00C4291A+3309578]\nE       \tGetHandleVerifier [0x00C3CF42+3286578]\nE       \tGetHandleVerifier [0x009B7AE0+643536]\nE       \t(No symbol) [0x008BA20D]\nE       \t(No symbol) [0x00762F10]\nE       \t(No symbol) [0x00762AD6]\nE       \tGetHandleVerifier [0x00CC717C+3852396]\nE       \tBaseThreadInitThunk [0x75CC5D49+25]\nE       \tRtlInitializeExceptionChain [0x774FCDEB+107]\nE       \tRtlGetAppContainerNamedObjectPath [0x774FCD71+561]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: InvalidSessionIdException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <user_session_with_browser_quitting.Test_TC_LG_003 object at 0x000001CF267261B0>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"d86c0072dad070ced0c95e1f8c703b26\")>\n\n    def test_TC_LG_003(self, setup):\n        self.driver = setup\n        self.driver.get(self.baseurl)\n        self.driver.maximize_window()\n        self.logger.info(\"Application Started..........\")\n    \n        try:\n            # Step 1: Perform Login\n            self.hp = Homepage(self.driver)\n            self.hp.clickmyaccount()\n            self.hp.clicklogin()\n    \n            self.lp = Login(self.driver)\n            self.lp.click_email(Read_Commondata.get_useremail())\n            self.lp.click_password(Read_Commondata.get_userpassword())\n            self.lp.click_login()\n    \n            # Step 2: Validate Login Success\n            self.myacc = self.lp.myaccount_page()\n    \n            if self.myacc.strip().lower() == \"valid\":\n                self.logger.info(\"User logged in successfully\")\n                allure.attach(self.driver.get_screenshot_as_png(), name=\"After Login\", attachment_type=AttachmentType.PNG)\n    \n                # Step 3: Capture Cookies for Session Persistence\n                cookies = self.driver.get_cookies()\n                self.driver.close()\n    \n                # Step 4: Reopen the Browser and Restore Cookies\n                self.driver = setup\n                self.driver.get(self.baseurl)\n                self.driver.maximize_window()\n    \n                for cookie in cookies:\n                    self.driver.add_cookie(cookie)\n    \n                self.driver.refresh()\n                self.logger.info(\"Reopened the browser with session cookies\")\n    \n                # Step 5: Validate Session Persistence\n                self.ma = My_Account_page(self.driver)\n                self.ma.click_myaccount()\n    \n                if self.ma.is_logout_visible():\n                    self.logger.info(\"Session maintained successfully\")\n                    allure.attach(self.driver.get_screenshot_as_png(), name=\"Session Maintained\", attachment_type=AttachmentType.PNG)\n                    assert True\n                else:\n                    self.logger.error(\"Session not maintained\")\n                    allure.attach(self.driver.get_screenshot_as_png(), name=\"Session Lost\", attachment_type=AttachmentType.PNG)\n                    assert False\n            else:\n                self.logger.error(\"Login failed\")\n                allure.attach(self.driver.get_screenshot_as_png(), name=\"Login Failed\", attachment_type=AttachmentType.PNG)\n                assert False\n    \n        except Exception as e:\n            self.logger.error(f\"Error during execution: {e}\")\n>           allure.attach(self.driver.get_screenshot_as_png(), name=\"Error Occurred\", attachment_type=AttachmentType.PNG)\n\ntestCases\\Logout Test Cases\\user_session_with_browser_quitting.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:853: in get_screenshot_as_png\n    return b64decode(self.get_screenshot_as_base64().encode(\"ascii\"))\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:864: in get_screenshot_as_base64\n    return self.execute(Command.SCREENSHOT)[\"value\"]\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001CF27540C50>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"invalid session id\",\"stacktrace\":\"\\\\tGetHa...9+25]\\\\n\\\\tRtlInitializeExceptionChain [0x774FCDEB+107]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x774FCD71+561]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00920B43+25139]\nE       \t(No symbol) [0x008B13F4]\nE       \t(No symbol) [0x00790340]\nE       \t(No symbol) [0x007CB278]\nE       \t(No symbol) [0x007FCE86]\nE       \t(No symbol) [0x007F8861]\nE       \t(No symbol) [0x007F7DE6]\nE       \t(No symbol) [0x00763245]\nE       \t(No symbol) [0x0076379E]\nE       \t(No symbol) [0x00763C1D]\nE       \tGetHandleVerifier [0x00C24373+3185251]\nE       \tGetHandleVerifier [0x00C4291A+3309578]\nE       \tGetHandleVerifier [0x00C3CF42+3286578]\nE       \tGetHandleVerifier [0x009B7AE0+643536]\nE       \t(No symbol) [0x008BA20D]\nE       \t(No symbol) [0x00762F10]\nE       \t(No symbol) [0x00762AD6]\nE       \tGetHandleVerifier [0x00CC717C+3852396]\nE       \tBaseThreadInitThunk [0x75CC5D49+25]\nE       \tRtlInitializeExceptionChain [0x774FCDEB+107]\nE       \tRtlGetAppContainerNamedObjectPath [0x774FCD71+561]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: InvalidSessionIdException"}, "attachments": [{"name": "After Login", "source": "5b3ba547-6552-491f-b393-6c94af37bbf5-attachment.png", "type": "image/png"}, {"name": "log", "source": "57803c32-11f8-4036-9321-21367d96b8ff-attachment.txt", "type": "text/plain"}], "start": 1741025778334, "stop": 1741025793687, "uuid": "7fbe9795-af51-4724-902f-61179dedb3e3", "historyId": "6cacf6dfc64be96be1734847d858e94b", "testCaseId": "6cacf6dfc64be96be1734847d858e94b", "fullName": "testCases.Logout Test Cases.user_session_with_browser_quitting.Test_TC_LG_003#test_TC_LG_003", "labels": [{"name": "severity", "value": "critical"}, {"name": "tag", "value": "critical"}, {"name": "tag", "value": "smoke"}, {"name": "tag", "value": "login"}, {"name": "parentSuite", "value": "testCases.Logout Test Cases"}, {"name": "suite", "value": "user_session_with_browser_quitting"}, {"name": "subSuite", "value": "Test_TC_LG_003"}, {"name": "host", "value": "DESKTOP-DL1JSBI"}, {"name": "thread", "value": "2312-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testCases.Logout Test Cases.user_session_with_browser_quitting"}]}