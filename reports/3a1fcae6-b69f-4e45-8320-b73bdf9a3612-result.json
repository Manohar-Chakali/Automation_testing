{"name": "test_TC_LG_003", "status": "failed", "statusDetails": {"message": "AssertionError: assert False", "trace": "self = <TC_LG_003.Test_TC_LG_003 object at 0x00000216E92A9B50>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"e6de74751447af6389dbed67dcbd25be\")>\n\n    def test_TC_LG_003(self, setup):\n        self.driver = setup\n        self.driver.get(self.baseurl)\n        self.driver.maximize_window()\n        self.logger.info(\"Application Started..........\")\n    \n        try:\n            # Step 1: Perform Login\n            self.hp = Homepage(self.driver)\n            self.hp.clickmyaccount()\n            self.hp.clicklogin()\n    \n            self.lp = Login(self.driver)\n            self.lp.click_email(Read_Commondata.get_useremail())\n            self.lp.click_password(Read_Commondata.get_userpassword())\n            self.lp.click_login()\n    \n            # Step 2: Validate Login Success\n            self.myacc = self.lp.myaccount_page()\n    \n            if self.myacc.strip().lower() == \"valid\":\n                self.logger.info(f\"user {Read_Commondata.get_useremail()} logged in successfully\")\n                allure.attach(self.driver.get_screenshot_as_png(), name=\"After login: My Account page\",\n                              attachment_type=AttachmentType.PNG)\n    \n                # Step 3: Capture Cookies (for Session Persistence Check)\n                cookies = self.driver.get_cookies()\n                self.logger.info(f\"Cookies captured: {cookies}\")\n    \n                # Step 4: Close the Browser\n                self.driver.quit()\n    \n                # Step 5: Reopen a New Browser Session\n                self.driver = webdriver.Chrome()  # Ensure proper driver initialization\n                self.driver.get(self.baseurl)\n    \n                # Restore Cookies\n                for cookie in cookies:\n                    if \"sameSite\" in cookie:\n                        cookie.pop(\"sameSite\")  # Handle any sameSite policy issues\n                    self.driver.add_cookie(cookie)\n    \n                # Reload the page to apply cookies\n                self.driver.refresh()\n                self.logger.info(\"Reopened the browser and applied session cookies\")\n    \n                # Step 6: Validate Session Persistence\n                self.ma = My_Account_page(self.driver)\n>               self.ma.click_myaccount()\n\ntestCases\\Logout Test Cases\\TC_LG_003.py:63: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nPageObjects\\Myaccount_Page.py:18: in click_myaccount\n    my_account = WebDriverWait(self.driver, 10).until(EC.element_to_be_clickable((By.XPATH, self.drp_myAccount_xpath)))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"5848812ae72703c2f209d6d709293975\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x00000216E949C220>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:105: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <TC_LG_003.Test_TC_LG_003 object at 0x00000216E92A9B50>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"e6de74751447af6389dbed67dcbd25be\")>\n\n    def test_TC_LG_003(self, setup):\n        self.driver = setup\n        self.driver.get(self.baseurl)\n        self.driver.maximize_window()\n        self.logger.info(\"Application Started..........\")\n    \n        try:\n            # Step 1: Perform Login\n            self.hp = Homepage(self.driver)\n            self.hp.clickmyaccount()\n            self.hp.clicklogin()\n    \n            self.lp = Login(self.driver)\n            self.lp.click_email(Read_Commondata.get_useremail())\n            self.lp.click_password(Read_Commondata.get_userpassword())\n            self.lp.click_login()\n    \n            # Step 2: Validate Login Success\n            self.myacc = self.lp.myaccount_page()\n    \n            if self.myacc.strip().lower() == \"valid\":\n                self.logger.info(f\"user {Read_Commondata.get_useremail()} logged in successfully\")\n                allure.attach(self.driver.get_screenshot_as_png(), name=\"After login: My Account page\",\n                              attachment_type=AttachmentType.PNG)\n    \n                # Step 3: Capture Cookies (for Session Persistence Check)\n                cookies = self.driver.get_cookies()\n                self.logger.info(f\"Cookies captured: {cookies}\")\n    \n                # Step 4: Close the Browser\n                self.driver.quit()\n    \n                # Step 5: Reopen a New Browser Session\n                self.driver = webdriver.Chrome()  # Ensure proper driver initialization\n                self.driver.get(self.baseurl)\n    \n                # Restore Cookies\n                for cookie in cookies:\n                    if \"sameSite\" in cookie:\n                        cookie.pop(\"sameSite\")  # Handle any sameSite policy issues\n                    self.driver.add_cookie(cookie)\n    \n                # Reload the page to apply cookies\n                self.driver.refresh()\n                self.logger.info(\"Reopened the browser and applied session cookies\")\n    \n                # Step 6: Validate Session Persistence\n                self.ma = My_Account_page(self.driver)\n                self.ma.click_myaccount()\n    \n                if self.ma.is_logout_visible():\n                    self.logger.info(\"Session maintained successfully after reopening the browser\")\n                    allure.attach(self.driver.get_screenshot_as_png(), name=\"Session Maintained\",\n                                  attachment_type=AttachmentType.PNG)\n                    assert True\n                else:\n                    self.logger.error(\"Session not maintained, user is logged out\")\n                    allure.attach(self.driver.get_screenshot_as_png(), name=\"Session Lost\",\n                                  attachment_type=AttachmentType.PNG)\n                    assert False\n    \n            else:\n                self.logger.error(\"Login unsuccessful, cannot validate session persistence\")\n                allure.attach(self.driver.get_screenshot_as_png(), name=\"Login Failed\", attachment_type=AttachmentType.PNG)\n                assert False\n    \n        except Exception as e:\n            self.logger.error(f\"Error during navigation or login function: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(), name=\"Error occurred\", attachment_type=AttachmentType.PNG)\n>           assert False\nE           assert False\n\ntestCases\\Logout Test Cases\\TC_LG_003.py:84: AssertionError"}, "attachments": [{"name": "After login: My Account page", "source": "2375616e-c4ae-431f-857a-abaefb769343-attachment.png", "type": "image/png"}, {"name": "Error occurred", "source": "2943702d-4d82-4451-9985-349dc102a155-attachment.png", "type": "image/png"}, {"name": "log", "source": "e3125af0-1f61-4cdb-8dfa-a6634512496a-attachment.txt", "type": "text/plain"}], "start": 1740940651149, "stop": 1740940689253, "uuid": "23de3fd0-26fe-4d23-bb0b-b5bed2fae6f3", "historyId": "365f1b05d96d82d120ff5f8f0fc2d2a9", "testCaseId": "365f1b05d96d82d120ff5f8f0fc2d2a9", "fullName": "testCases.Logout Test Cases.TC_LG_003.Test_TC_LG_003#test_TC_LG_003", "labels": [{"name": "parentSuite", "value": "testCases.Logout Test Cases"}, {"name": "suite", "value": "TC_LG_003"}, {"name": "subSuite", "value": "Test_TC_LG_003"}, {"name": "host", "value": "DESKTOP-DL1JSBI"}, {"name": "thread", "value": "4452-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testCases.Logout Test Cases.TC_LG_003"}]}