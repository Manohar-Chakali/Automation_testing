{"name": "test_TC_LG_003", "status": "failed", "statusDetails": {"message": "AssertionError: assert False", "trace": "self = <TC_LG_004.Test_TC_LG_003 object at 0x00000268AFA49BE0>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"c6c323a7c377c9b37b83175f1ad32091\")>\n\n    def test_TC_LG_003(self, setup):\n        self.driver = setup\n        self.driver.get(self.baseurl)\n        self.driver.maximize_window()\n        self.logger.info(\"Application Started..........\")\n    \n        try:\n            # Step 1: Perform Login\n            self.hp = Homepage(self.driver)\n            self.hp.clickmyaccount()\n            self.hp.clicklogin()\n    \n            self.lp = Login(self.driver)\n            self.lp.click_email(Read_Commondata.get_useremail())\n            self.lp.click_password(Read_Commondata.get_userpassword())\n            self.lp.click_login()\n    \n            # Step 2: Validate Login Success\n            self.myacc = self.lp.myaccount_page()\n    \n    \n            if self.myacc.strip().lower() == \"valid\":\n                self.logger.info(f\"User {Read_Commondata.get_useremail()} logged in successfully\")\n                allure.attach(self.driver.get_screenshot_as_png(), name=\"After login: My Account page\", attachment_type=AttachmentType.PNG)\n    \n                # Step 4: Validate Session Persistence\n                self.ma = My_Account_page(self.driver)\n                self.ma.click_myaccount()\n    \n    \n                if self.ma.is_logout_visible():\n                    self.logger.info(\"Session maintained successfully after reopening the browser\")\n                    allure.attach(self.driver.get_screenshot_as_png(), name=\"Session Maintained\", attachment_type=AttachmentType.PNG)\n                    self.ma.click_logout()\n                    self.driver.back()\n                    self.ma.click_myaccount()\n                    if self.ma.is_logout_visible():\n                        self.logger.info(\"Session maintained even after logout....so logging out \")\n                        allure.attach(self.driver.get_screenshot_as_png(), name=\"Session maintained even after logout\", attachment_type=AttachmentType.PNG)\n                        self.ma.click_logout()\n>                       assert False\nE                       assert False\n\ntestCases\\Logout Test Cases\\TC_LG_004.py:55: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <TC_LG_004.Test_TC_LG_003 object at 0x00000268AFA49BE0>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"c6c323a7c377c9b37b83175f1ad32091\")>\n\n    def test_TC_LG_003(self, setup):\n        self.driver = setup\n        self.driver.get(self.baseurl)\n        self.driver.maximize_window()\n        self.logger.info(\"Application Started..........\")\n    \n        try:\n            # Step 1: Perform Login\n            self.hp = Homepage(self.driver)\n            self.hp.clickmyaccount()\n            self.hp.clicklogin()\n    \n            self.lp = Login(self.driver)\n            self.lp.click_email(Read_Commondata.get_useremail())\n            self.lp.click_password(Read_Commondata.get_userpassword())\n            self.lp.click_login()\n    \n            # Step 2: Validate Login Success\n            self.myacc = self.lp.myaccount_page()\n    \n    \n            if self.myacc.strip().lower() == \"valid\":\n                self.logger.info(f\"User {Read_Commondata.get_useremail()} logged in successfully\")\n                allure.attach(self.driver.get_screenshot_as_png(), name=\"After login: My Account page\", attachment_type=AttachmentType.PNG)\n    \n                # Step 4: Validate Session Persistence\n                self.ma = My_Account_page(self.driver)\n                self.ma.click_myaccount()\n    \n    \n                if self.ma.is_logout_visible():\n                    self.logger.info(\"Session maintained successfully after reopening the browser\")\n                    allure.attach(self.driver.get_screenshot_as_png(), name=\"Session Maintained\", attachment_type=AttachmentType.PNG)\n                    self.ma.click_logout()\n                    self.driver.back()\n                    self.ma.click_myaccount()\n                    if self.ma.is_logout_visible():\n                        self.logger.info(\"Session maintained even after logout....so logging out \")\n                        allure.attach(self.driver.get_screenshot_as_png(), name=\"Session maintained even after logout\", attachment_type=AttachmentType.PNG)\n                        self.ma.click_logout()\n                        assert False\n                    else:\n                        allure.attach(self.driver.get_screenshot_as_png(), name=\"Session not maintained even after logout\",\n                                      attachment_type=AttachmentType.PNG)\n                        assert True\n    \n            else:\n                self.logger.error(\"Login unsuccessful, cannot validate session persistence\")\n                allure.attach(self.driver.get_screenshot_as_png(), name=\"Login Failed\", attachment_type=AttachmentType.PNG)\n                assert False\n    \n        except Exception as e:\n            self.logger.error(f\"Error during navigation or login function: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(), name=\"Error occurred\", attachment_type=AttachmentType.PNG)\n>           assert False\nE           assert False\n\ntestCases\\Logout Test Cases\\TC_LG_004.py:69: AssertionError"}, "attachments": [{"name": "After login: My Account page", "source": "1dc0ee1a-84b8-45e4-a347-2e926e8b8719-attachment.png", "type": "image/png"}, {"name": "Session Maintained", "source": "c51b8c54-1671-4692-aa86-0d5c83b819ef-attachment.png", "type": "image/png"}, {"name": "Session maintained even after logout", "source": "57f5cbcc-4622-4b49-9d0f-2f3db20d988c-attachment.png", "type": "image/png"}, {"name": "Error occurred", "source": "59299593-7e07-4048-8cf4-0662e5e4f14c-attachment.png", "type": "image/png"}, {"name": "log", "source": "4b5fe201-b885-446b-82c8-8006b02f5b43-attachment.txt", "type": "text/plain"}], "start": 1740942855782, "stop": 1740942873014, "uuid": "9682740a-49ae-490c-a123-c2c000d4230b", "historyId": "252b45249168fb6570cabbaaf2287cea", "testCaseId": "252b45249168fb6570cabbaaf2287cea", "fullName": "testCases.Logout Test Cases.TC_LG_004.Test_TC_LG_003#test_TC_LG_003", "labels": [{"name": "parentSuite", "value": "testCases.Logout Test Cases"}, {"name": "suite", "value": "TC_LG_004"}, {"name": "subSuite", "value": "Test_TC_LG_003"}, {"name": "host", "value": "DESKTOP-DL1JSBI"}, {"name": "thread", "value": "8128-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testCases.Logout Test Cases.TC_LG_004"}]}