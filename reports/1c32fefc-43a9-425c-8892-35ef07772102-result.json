{"name": "test_login", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidArgumentException: Message: invalid argument\n  (Session info: chrome=132.0.6834.160)\nStacktrace:\n\tGetHandleVerifier [0x00E874A3+25091]\n\t(No symbol) [0x00E0DC04]\n\t(No symbol) [0x00CEB1E9]\n\t(No symbol) [0x00CDC560]\n\t(No symbol) [0x00CDAD67]\n\t(No symbol) [0x00CDB33B]\n\t(No symbol) [0x00CEDDBE]\n\t(No symbol) [0x00D6BEC7]\n\t(No symbol) [0x00D51F0C]\n\t(No symbol) [0x00D6B49E]\n\t(No symbol) [0x00D51CA6]\n\t(No symbol) [0x00D231D5]\n\t(No symbol) [0x00D2435D]\n\tGetHandleVerifier [0x011807C3+3142947]\n\tGetHandleVerifier [0x01191A2B+3213195]\n\tGetHandleVerifier [0x0118C412+3191154]\n\tGetHandleVerifier [0x00F28720+685184]\n\t(No symbol) [0x00E16E1D]\n\t(No symbol) [0x00E13E18]\n\t(No symbol) [0x00E13FB6]\n\t(No symbol) [0x00E066F0]\n\tBaseThreadInitThunk [0x764F7BA9+25]\n\tRtlInitializeExceptionChain [0x77DBC0CB+107]\n\tRtlClearBits [0x77DBC04F+191]", "trace": "self = <testCases.test_002_Login.Test_002_login object at 0x0000020E05217B10>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"4079b63432a9fd6358d2852d55d0ac56\")>\n\n    @allure.severity(allure.severity_level.CRITICAL)\n    def test_login(self, setup):\n        self.driver = setup\n>       self.driver.get(self.baseurl)\n\ntestCases\\test_002_Login.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:454: in get\n    self.execute(Command.GET, {\"url\": url})\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000020E052D6990>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid argument\",\"message\":\"invalid argument\\\\n  (Session info: chrome=1...dInitThunk [0x764F7BA9+25]\\\\n\\\\tRtlInitializeExceptionChain [0x77DBC0CB+107]\\\\n\\\\tRtlClearBits [0x77DBC04F+191]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidArgumentException: Message: invalid argument\nE         (Session info: chrome=132.0.6834.160)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00E874A3+25091]\nE       \t(No symbol) [0x00E0DC04]\nE       \t(No symbol) [0x00CEB1E9]\nE       \t(No symbol) [0x00CDC560]\nE       \t(No symbol) [0x00CDAD67]\nE       \t(No symbol) [0x00CDB33B]\nE       \t(No symbol) [0x00CEDDBE]\nE       \t(No symbol) [0x00D6BEC7]\nE       \t(No symbol) [0x00D51F0C]\nE       \t(No symbol) [0x00D6B49E]\nE       \t(No symbol) [0x00D51CA6]\nE       \t(No symbol) [0x00D231D5]\nE       \t(No symbol) [0x00D2435D]\nE       \tGetHandleVerifier [0x011807C3+3142947]\nE       \tGetHandleVerifier [0x01191A2B+3213195]\nE       \tGetHandleVerifier [0x0118C412+3191154]\nE       \tGetHandleVerifier [0x00F28720+685184]\nE       \t(No symbol) [0x00E16E1D]\nE       \t(No symbol) [0x00E13E18]\nE       \t(No symbol) [0x00E13FB6]\nE       \t(No symbol) [0x00E066F0]\nE       \tBaseThreadInitThunk [0x764F7BA9+25]\nE       \tRtlInitializeExceptionChain [0x77DBC0CB+107]\nE       \tRtlClearBits [0x77DBC04F+191]\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: InvalidArgumentException"}, "attachments": [{"name": "log", "source": "4de4d513-5541-4f7d-b75a-7fcd63498049-attachment.txt", "type": "text/plain"}], "start": 1739728539654, "stop": 1739728539668, "uuid": "b31d8dc0-5174-4605-9b36-cdf8bd9e16fa", "historyId": "1d09a1f6309e311a9ccec921f3c46af4", "testCaseId": "1d09a1f6309e311a9ccec921f3c46af4", "fullName": "testCases.test_002_Login.Test_002_login#test_login", "labels": [{"name": "severity", "value": "critical"}, {"name": "parentSuite", "value": "testCases"}, {"name": "suite", "value": "test_002_Login"}, {"name": "subSuite", "value": "Test_002_login"}, {"name": "host", "value": "DESKTOP-DL1JSBI"}, {"name": "thread", "value": "29316-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testCases.test_002_Login"}]}