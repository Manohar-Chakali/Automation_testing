{"name": "test_TC_LG_004", "status": "failed", "statusDetails": {"message": "AssertionError: assert False", "trace": "self = <test_TC_LG_004.Test_TC_LG_004 object at 0x000001C1F71F7B10>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"68e08c9f77c027d7f0993eacdbca4f33\")>\n\n    def test_TC_LG_004(self, setup):\n        self.driver = setup\n        self.driver.get(self.baseurl)\n        self.driver.maximize_window()\n        self.logger.info(\"Application Started..........\")\n    \n        try:\n            # Step 1: Perform Login\n            self.hp = Homepage(self.driver)\n            self.hp.clickmyaccount()\n            self.hp.clicklogin()\n    \n            self.lp = Login(self.driver)\n            self.lp.click_email(Read_Commondata.get_useremail())\n            self.lp.click_password(Read_Commondata.get_userpassword())\n            self.lp.click_login()\n    \n            # Step 2: Validate Login Success\n            self.myacc = self.lp.myaccount_page()\n    \n    \n            if self.myacc.strip().lower() == \"valid\":\n                self.logger.info(f\"User {Read_Commondata.get_useremail()} logged in successfully\")\n                allure.attach(self.driver.get_screenshot_as_png(), name=\"After login: My Account page\", attachment_type=AttachmentType.PNG)\n    \n                # Step 4: Validate Session Persistence\n                self.ma = My_Account_page(self.driver)\n                self.ma.click_myaccount()\n    \n    \n                if self.ma.is_logout_visible():\n                    self.logger.info(\"Session maintained successfully after reopening the browser\")\n                    allure.attach(self.driver.get_screenshot_as_png(), name=\"Session Maintained\", attachment_type=AttachmentType.PNG)\n                    self.ma.click_logout()\n                    self.driver.back()\n                    self.ma.click_myaccount()\n                    if self.ma.is_logout_visible():\n                        self.logger.info(\"Session maintained even after logout....so logging out \")\n                        allure.attach(self.driver.get_screenshot_as_png(), name=\"Session maintained even after logout\", attachment_type=AttachmentType.PNG)\n                        self.ma.click_logout()\n>                       assert False\nE                       assert False\n\ntestCases\\Logout Test Cases\\test_TC_LG_004.py:61: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_TC_LG_004.Test_TC_LG_004 object at 0x000001C1F71F7B10>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"68e08c9f77c027d7f0993eacdbca4f33\")>\n\n    def test_TC_LG_004(self, setup):\n        self.driver = setup\n        self.driver.get(self.baseurl)\n        self.driver.maximize_window()\n        self.logger.info(\"Application Started..........\")\n    \n        try:\n            # Step 1: Perform Login\n            self.hp = Homepage(self.driver)\n            self.hp.clickmyaccount()\n            self.hp.clicklogin()\n    \n            self.lp = Login(self.driver)\n            self.lp.click_email(Read_Commondata.get_useremail())\n            self.lp.click_password(Read_Commondata.get_userpassword())\n            self.lp.click_login()\n    \n            # Step 2: Validate Login Success\n            self.myacc = self.lp.myaccount_page()\n    \n    \n            if self.myacc.strip().lower() == \"valid\":\n                self.logger.info(f\"User {Read_Commondata.get_useremail()} logged in successfully\")\n                allure.attach(self.driver.get_screenshot_as_png(), name=\"After login: My Account page\", attachment_type=AttachmentType.PNG)\n    \n                # Step 4: Validate Session Persistence\n                self.ma = My_Account_page(self.driver)\n                self.ma.click_myaccount()\n    \n    \n                if self.ma.is_logout_visible():\n                    self.logger.info(\"Session maintained successfully after reopening the browser\")\n                    allure.attach(self.driver.get_screenshot_as_png(), name=\"Session Maintained\", attachment_type=AttachmentType.PNG)\n                    self.ma.click_logout()\n                    self.driver.back()\n                    self.ma.click_myaccount()\n                    if self.ma.is_logout_visible():\n                        self.logger.info(\"Session maintained even after logout....so logging out \")\n                        allure.attach(self.driver.get_screenshot_as_png(), name=\"Session maintained even after logout\", attachment_type=AttachmentType.PNG)\n                        self.ma.click_logout()\n                        assert False\n                    else:\n                        allure.attach(self.driver.get_screenshot_as_png(), name=\"Session not maintained after logout\",\n                                      attachment_type=AttachmentType.PNG)\n                        assert True\n    \n            else:\n                self.logger.error(\"Login unsuccessful, cannot validate session persistence\")\n                allure.attach(self.driver.get_screenshot_as_png(), name=\"Login Failed\", attachment_type=AttachmentType.PNG)\n                assert False\n    \n        except Exception as e:\n            self.logger.error(f\"Error during navigation or login function: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(), name=\"Error occurred\", attachment_type=AttachmentType.PNG)\n>           assert False\nE           assert False\n\ntestCases\\Logout Test Cases\\test_TC_LG_004.py:75: AssertionError"}, "attachments": [{"name": "After login: My Account page", "source": "a0103b8d-019e-4f34-a298-ea291ae8fd95-attachment.png", "type": "image/png"}, {"name": "Session Maintained", "source": "09503ce7-9e41-435d-8bc5-00ff281851ea-attachment.png", "type": "image/png"}, {"name": "Session maintained even after logout", "source": "c6c41a4a-851f-4d70-9c0b-077ce56cfeca-attachment.png", "type": "image/png"}, {"name": "Error occurred", "source": "5f5ce75d-c333-40f8-8850-60b3ec66dd0c-attachment.png", "type": "image/png"}, {"name": "log", "source": "7d586589-fe6d-4786-b0c7-22ada40abc2c-attachment.txt", "type": "text/plain"}], "start": 1742320809916, "stop": 1742320827144, "uuid": "aa18e8ed-15bb-416c-8253-5301599b9481", "historyId": "0738fdb89d86f23a8c64a48c5a96b144", "testCaseId": "0738fdb89d86f23a8c64a48c5a96b144", "fullName": "testCases.Logout Test Cases.test_TC_LG_004.Test_TC_LG_004#test_TC_LG_004", "labels": [{"name": "severity", "value": "critical"}, {"name": "tag", "value": "session"}, {"name": "tag", "value": "critical"}, {"name": "tag", "value": "negative"}, {"name": "tag", "value": "regression"}, {"name": "parentSuite", "value": "testCases.Logout Test Cases"}, {"name": "suite", "value": "test_TC_LG_004"}, {"name": "subSuite", "value": "Test_TC_LG_004"}, {"name": "host", "value": "DESKTOP-DL1JSBI"}, {"name": "thread", "value": "7112-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testCases.Logout Test Cases.test_TC_LG_004"}]}