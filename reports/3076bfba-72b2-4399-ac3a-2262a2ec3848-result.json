{"name": "test_account_reg", "status": "failed", "statusDetails": {"message": "AssertionError: assert False", "trace": "self = <testCases.test_001_Accountregistrationpage.Test_001_AccountReg object at 0x0000020E05216D50>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"fbc16b2d984a4e35b77a7f41c7f5859b\")>\n\n    def test_account_reg(self, setup):\n        self.driver = setup\n        try:\n            # Log the start of the test case\n            self.logger.info(\"**** Starting test_account_reg ****\")\n    \n>           self.driver.get(self.baseUrl)\n\ntestCases\\test_001_Accountregistrationpage.py:25: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:454: in get\n    self.execute(Command.GET, {\"url\": url})\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000020E052D0440>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid argument\",\"message\":\"invalid argument\\\\n  (Session info: chrome=1...dInitThunk [0x764F7BA9+25]\\\\n\\\\tRtlInitializeExceptionChain [0x77DBC0CB+107]\\\\n\\\\tRtlClearBits [0x77DBC04F+191]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidArgumentException: Message: invalid argument\nE         (Session info: chrome=132.0.6834.160)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00E874A3+25091]\nE       \t(No symbol) [0x00E0DC04]\nE       \t(No symbol) [0x00CEB1E9]\nE       \t(No symbol) [0x00CDC560]\nE       \t(No symbol) [0x00CDAD67]\nE       \t(No symbol) [0x00CDB33B]\nE       \t(No symbol) [0x00CEDDBE]\nE       \t(No symbol) [0x00D6BEC7]\nE       \t(No symbol) [0x00D51F0C]\nE       \t(No symbol) [0x00D6B49E]\nE       \t(No symbol) [0x00D51CA6]\nE       \t(No symbol) [0x00D231D5]\nE       \t(No symbol) [0x00D2435D]\nE       \tGetHandleVerifier [0x011807C3+3142947]\nE       \tGetHandleVerifier [0x01191A2B+3213195]\nE       \tGetHandleVerifier [0x0118C412+3191154]\nE       \tGetHandleVerifier [0x00F28720+685184]\nE       \t(No symbol) [0x00E16E1D]\nE       \t(No symbol) [0x00E13E18]\nE       \t(No symbol) [0x00E13FB6]\nE       \t(No symbol) [0x00E066F0]\nE       \tBaseThreadInitThunk [0x764F7BA9+25]\nE       \tRtlInitializeExceptionChain [0x77DBC0CB+107]\nE       \tRtlClearBits [0x77DBC04F+191]\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: InvalidArgumentException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <testCases.test_001_Accountregistrationpage.Test_001_AccountReg object at 0x0000020E05216D50>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"fbc16b2d984a4e35b77a7f41c7f5859b\")>\n\n    def test_account_reg(self, setup):\n        self.driver = setup\n        try:\n            # Log the start of the test case\n            self.logger.info(\"**** Starting test_account_reg ****\")\n    \n            self.driver.get(self.baseUrl)\n            self.driver.maximize_window()\n    \n            # Log the navigation step\n            self.logger.debug(\"**** Navigating to My Account and Register ****\")\n            self.hp = Homepage(self.driver)\n    \n            # Clicking 'My Account' and 'Register'\n            self.hp.clickmyaccount()\n            self.logger.debug(\"**** Clicking My Account ****\")\n            time.sleep(2)\n            self.hp.clickregister()\n            self.logger.debug(\"**** Clicking Register ****\")\n    \n            # Log when reaching the registration page\n            self.logger.debug(\"**** Reached Registration Page ****\")\n            self.repage = Registration(self.driver)\n    \n            # Fill out the registration form\n            self.repage.clickfirstname()\n            self.logger.debug(\"**** First Name clicked ****\")\n            self.repage.clicklastname()\n            self.logger.debug(\"**** Last Name clicked ****\")\n            self.email = random_string_generator() + '@mailinator.com'\n            self.repage.clickemail(self.email)\n            allure.attach(self.driver.get_screenshot_as_png(),name='Email-added', attachment_type=AttachmentType.PNG)\n            self.logger.debug(\"**** Email clicked ****\")\n            self.repage.clicktelephone()\n            self.logger.debug(\"**** Telephone clicked ****\")\n            self.repage.clickpassword()\n            self.logger.debug(\"**** Password clicked ****\")\n            self.repage.clickcnfpassword()\n            self.logger.debug(\"**** Confirm password clicked ****\")\n            self.repage.clickagreebtn()\n            self.logger.debug(\"**** Privacy Policy clicked ****\")\n            self.repage.clickcontinuebtn()\n            self.logger.debug(\"**** Continue button clicked ****\")\n    \n            # Log the confirmation message\n            self.cnfmessage = self.repage.getsuccessmessage()\n            self.logger.info(f\"**** Confirmation message: {self.cnfmessage} ****\")\n    \n            # Assert based on the confirmation message\n            if self.cnfmessage == \"Your Account Has Been Created!\":\n                self.logger.info(\"**** Account creation successful ****\")\n                assert True\n            else:\n                self.logger.error(\"**** Account creation failed ****\")\n                # Ensure the screenshots directory exists\n                screenshots_dir = os.path.join(os.path.abspath(os.curdir), \"screenshots\")\n                if not os.path.exists(screenshots_dir):\n                    os.makedirs(screenshots_dir)\n                self.driver.save_screenshot(os.path.join(screenshots_dir, \"error1.png\"))\n                assert False\n    \n        except Exception as e:\n            self.logger.error(f\"Error during the test: {e}\")\n            screenshots_dir = os.path.join(os.path.abspath(os.curdir), \"screenshots\")\n            if not os.path.exists(screenshots_dir):\n                os.makedirs(screenshots_dir)\n            self.driver.save_screenshot(os.path.join(screenshots_dir, \"error.png\"))\n>           assert False\nE           assert False\n\ntestCases\\test_001_Accountregistrationpage.py:86: AssertionError"}, "attachments": [{"name": "log", "source": "d3c47530-cae7-4d7f-a2c5-08430f8c3196-attachment.txt", "type": "text/plain"}], "start": 1739728514411, "stop": 1739728516766, "uuid": "565e5dde-7fcc-4dc8-adbc-04f201c54b54", "historyId": "f29914227615fc7bf1edfbf60e0f06bc", "testCaseId": "f29914227615fc7bf1edfbf60e0f06bc", "fullName": "testCases.test_001_Accountregistrationpage.Test_001_AccountReg#test_account_reg", "labels": [{"name": "parentSuite", "value": "testCases"}, {"name": "suite", "value": "test_001_Accountregistrationpage"}, {"name": "subSuite", "value": "Test_001_AccountReg"}, {"name": "host", "value": "DESKTOP-DL1JSBI"}, {"name": "thread", "value": "29316-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testCases.test_001_Accountregistrationpage"}]}