{"name": "test_reg", "status": "failed", "statusDetails": {"message": "AssertionError: assert False", "trace": "self = <testCases.test_003_registration_succ_with_continue.Test_reg_succ_continue object at 0x0000020E05217C50>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"1bc78e0a7f194ef23e24bb1fa8f19dbf\")>\n\n    @allure.severity(allure.severity_level.NORMAL)\n    def test_reg(self,setup):\n        self.driver = setup\n    \n        self.logger.info(\"** Setting the browser.......... **\")\n    \n        try:\n>           self.driver.get(self.baseurl)\n\ntestCases\\test_003_registration_succ_with_continue.py:25: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:454: in get\n    self.execute(Command.GET, {\"url\": url})\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000020E052D56D0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid argument\",\"message\":\"invalid argument\\\\n  (Session info: chrome=1...dInitThunk [0x764F7BA9+25]\\\\n\\\\tRtlInitializeExceptionChain [0x77DBC0CB+107]\\\\n\\\\tRtlClearBits [0x77DBC04F+191]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidArgumentException: Message: invalid argument\nE         (Session info: chrome=132.0.6834.160)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00E874A3+25091]\nE       \t(No symbol) [0x00E0DC04]\nE       \t(No symbol) [0x00CEB1E9]\nE       \t(No symbol) [0x00CDC560]\nE       \t(No symbol) [0x00CDAD67]\nE       \t(No symbol) [0x00CDB33B]\nE       \t(No symbol) [0x00CEDDBE]\nE       \t(No symbol) [0x00D6BEC7]\nE       \t(No symbol) [0x00D51F0C]\nE       \t(No symbol) [0x00D6B49E]\nE       \t(No symbol) [0x00D51CA6]\nE       \t(No symbol) [0x00D231D5]\nE       \t(No symbol) [0x00D2435D]\nE       \tGetHandleVerifier [0x011807C3+3142947]\nE       \tGetHandleVerifier [0x01191A2B+3213195]\nE       \tGetHandleVerifier [0x0118C412+3191154]\nE       \tGetHandleVerifier [0x00F28720+685184]\nE       \t(No symbol) [0x00E16E1D]\nE       \t(No symbol) [0x00E13E18]\nE       \t(No symbol) [0x00E13FB6]\nE       \t(No symbol) [0x00E066F0]\nE       \tBaseThreadInitThunk [0x764F7BA9+25]\nE       \tRtlInitializeExceptionChain [0x77DBC0CB+107]\nE       \tRtlClearBits [0x77DBC04F+191]\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: InvalidArgumentException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <testCases.test_003_registration_succ_with_continue.Test_reg_succ_continue object at 0x0000020E05217C50>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"1bc78e0a7f194ef23e24bb1fa8f19dbf\")>\n\n    @allure.severity(allure.severity_level.NORMAL)\n    def test_reg(self,setup):\n        self.driver = setup\n    \n        self.logger.info(\"** Setting the browser.......... **\")\n    \n        try:\n            self.driver.get(self.baseurl)\n            self.driver.maximize_window()\n            self.logger.info(\"** Driver Initiated.......... **\")\n    \n            self.hp = Homepage(self.driver)\n            self.hp.clickmyaccount()\n            self.hp.clickregister()\n            self.logger.info(\"** Register clicked .......... **\")\n            self.logger.info(\"** Registration started.......... **\")\n            self.repage = Registration(self.driver)\n            self.repage.clickfirstname()\n            self.repage.clicklastname()\n            self.email = random_string_generator() + '@mailinator.com'\n            self.repage.clickemail(self.email)\n            self.repage.clicktelephone()\n            self.repage.clickpassword()\n            self.repage.clickcnfpassword()\n            self.repage.clickagreebtn()\n            self.repage.clickcontinuebtn()\n    \n            self.cnf_mesg = self.repage.getsuccessmessage()\n    \n            if self.cnf_mesg == \"Your Account Has Been Created!\":\n                self.repage.clickcontinue_after_reg()\n                self.myacc_page = self.repage.get_myacc_cnfmsg()\n                if self.myacc_page == \"My Account\":\n                    screenshot_dir = os.path.join(os.path.abspath(os.curdir), \"screenshots\")\n                    if not os.path.exists(screenshot_dir):\n                        os.makedirs(screenshot_dir)\n                    self.driver.save_screenshot(os.path.join(screenshot_dir,\"Myacc_succ.png\"))\n                    print(f\"screen shot saves to {screenshot_dir}\")\n                    assert True\n    \n                else:\n                    assert False\n    \n        except Exception as e:\n            self.logger.error(f\"Error occurred while registering: {e}\")\n            # screenshot_dir = os.path.join(os.path.abspath(os.curdir), \"screenshots\")\n            # if not os.path.exists(screenshot_dir):\n            #     os.makedirs(screenshot_dir)\n            # self.driver.save_screenshot(os.path.join(screenshot_dir, \"test_reg_succ_continue_error.png\"))\n            # self.logger.info(f\"Failed screenshot saved to {screenshot_dir}\")\n            allure.attach(self.driver.get_screenshot_as_png(), name = \"auuretest\",\n                          attachment_type=AttachmentType.PNG)\n>           assert False  # Fail the test if an exception occurs\nE           assert False\n\ntestCases\\test_003_registration_succ_with_continue.py:70: AssertionError"}, "attachments": [{"name": "auuretest", "source": "95249887-4efd-4e84-aba3-78b6f3b097ce-attachment.png", "type": "image/png"}, {"name": "log", "source": "8f001671-e37e-42da-946e-314dac78b665-attachment.txt", "type": "text/plain"}], "start": 1739728544467, "stop": 1739728546811, "uuid": "778c7f35-2843-4104-afbc-cadc3dda8a3a", "historyId": "c9ebe2483c66c33d02d866ec55658dcf", "testCaseId": "c9ebe2483c66c33d02d866ec55658dcf", "fullName": "testCases.test_003_registration_succ_with_continue.Test_reg_succ_continue#test_reg", "labels": [{"name": "severity", "value": "normal"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup')"}, {"name": "parentSuite", "value": "testCases"}, {"name": "suite", "value": "test_003_registration_succ_with_continue"}, {"name": "subSuite", "value": "Test_reg_succ_continue"}, {"name": "host", "value": "DESKTOP-DL1JSBI"}, {"name": "thread", "value": "29316-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testCases.test_003_registration_succ_with_continue"}]}